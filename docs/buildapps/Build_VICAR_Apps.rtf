{\rtf1\mac \deff8\deflang1033{\fonttbl{\f0\froman\fcharset77\fprq2 Tms Rmn;}{\f1\fnil\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset77\fprq2 Helv;}{\f3\fnil\fcharset77\fprq2 Courier;}{\f4\fnil\fcharset77\fprq2 Times New Roman;}{\f5\fswiss\fcharset77\fprq2 Arial{\*\falt Helvetica};}{\f6\froman\fcharset77\fprq2 MS Serif;}{\f7\fswiss\fcharset77\fprq2 MS Sans Serif;}{\f8\fnil\fcharset77\fprq2 Times;}{\f9\fnil\fcharset77\fprq2 Helvetica;}{\f10\fswiss\fcharset77\fprq2 System;}{\f11\fnil\fcharset77\fprq2 Courier New;}{\f12\fnil\fcharset77\fprq2 New York;}{\f13\fnil\fcharset77\fprq2 Geneva;}{\f14\fnil\fcharset77\fprq2 BR Dingbats;}{\f15\fnil\fcharset77\fprq2 Century Schoolbook;}{\f16\fnil\fcharset77\fprq2 Charcoal;}{\f17\fnil\fcharset77\fprq2 Chicago;}{\f18\fnil\fcharset77\fprq2 Helsinki Narrow;}{\f19\fnil\fcharset77\fprq2 LockFont;}{\f20\fnil\fcharset77\fprq2 Mishawaka;}{\f21\fnil\fcharset77\fprq2 Mishawaka Bold;}{\f22\fnil\fcharset77\fprq2 Monaco;}{\f23\fnil\fcharset2\fprq2 Monotype Sorts;}{\f24\fnil\fcharset2\fprq2 MS LineDraw;}{\f25\fnil\fcharset2\fprq2 MT Extra;}{\f26\fnil\fcharset77\fprq2 OCR-A;}{\f27\fnil\fcharset77\fprq2 Palatino;}{\f28\fnil\fcharset77\fprq2 QuickType;}{\f29\fnil\fcharset77\fprq2 QuickType Condensed;}{\f30\fnil\fcharset77\fprq2 QuickType Mono;}{\f31\fnil\fcharset77\fprq2 QuickType Pi;}{\f32\fnil\fcharset2\fprq2 Wingdings;}{\f33\fnil\fcharset77\fprq2 Zapf Dingbats;}{\f34\fnil\fcharset77\fprq2 VT100;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue212;\red2\green171\blue234;\red31\green183\blue20;\red242\green8\blue132;\red221\green8\blue6;\red252\green243\blue5;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green100\blue17;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\li360\sb120\sa120\nowidctlpar \f8\fs20 \snext0 Normal;}{\s1\sb240\sa240\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f8\fs36 \sbasedon0\snext0 heading 1;}{\s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 \sbasedon1\snext0 heading 2;}{\s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 \sbasedon2\snext0 heading 3;}{\s4\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 \sbasedon3\snext0 heading 4;}{\s5\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl5\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 \sbasedon4\snext0 heading 5;}{\s6\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl6\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 \sbasedon5\snext0 heading 6;}{\s7\sb240\sa60\nowidctlpar{\*\pn \pnlvl7\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\f9\fs20 \sbasedon0\snext0 heading 7;}{\s8\sb240\sa60\nowidctlpar{\*\pn \pnlvl8\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\f9\fs20 \sbasedon0\snext0 heading 8;}{\s9\sb240\sa60\nowidctlpar{\*\pn \pnlvl9\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\f9\fs18 \sbasedon0\snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\fi360\sa120\nowidctlpar\tx360\tx2880\tx3600\tx4320\tx7200\tx10700 \f8\fs20 \sbasedon65\snext15 dir;}{\s16\fi360\li360\sa120\nowidctlpar\tx720\tx2880\tx3960\tx4320\tx7560\tx10700 \f8\fs20 \sbasedon15\snext16 dir 1;}{\*\cs17 \additive\i \sbasedon10 CITE;}{\*\cs18 \additive\f3\fs20 \sbasedon10 CODE;}{\s19\fi-360\li360\sb60\sa60\nowidctlpar \f8\fs20 \sbasedon0\snext19 Definition Compact;}{\s20\fi-720\li720\sb60\sa60\nowidctlpar \f8\fs20 \sbasedon0\snext20 Definition List;}{\*\cs21 \additive\f8\fs24 \sbasedon10 Definition Term;}{\*\cs22 \additive\i\fs24 \sbasedon10 Definition;}{\s23\li360\sb120\sa120\nowidctlpar\tx2880\tx5760 \f8\fs20 \sbasedon0\snext0 Directory;}{\*\cs24 \additive\i \sbasedon10 Emphasis;}{\s25\li360\sb120\sa120\sl-20\slmult0\nowidctlpar\box\brdrsh\brdrs\brdrw15\brdrcf15 \shading10000\cfpat8\cbpat8 \f8\fs20 \sbasedon0\snext0 Horizontal Rule;}{\*\cs26 \additive\ul\cf2 \sbasedon10 Hypertext;}{\*\cs27 \additive\f3\fs20\ulnone \sbasedon10 Keyboard;}{\s28\fi-360\li360\sb120\sa120\nowidctlpar{\*\pn \pnlvl11\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f8\fs20 \sbasedon0\snext28 List Bullet;}{\*\cs29 \additive\f4  Page Ref;}{\*\cs30 \additive\f3 \sbasedon10 Sample;}{\*\cs31 \additive\strike \sbasedon10 Strikethrough;}{\*\cs32 \additive\b \sbasedon10 Strong;}{\*\cs33 \additive\f3\fs20 \sbasedon10 Typewriter;}{\*\cs34 \additive\i\f8\fs24 \sbasedon10 Variable;}{\s35\fi360\li720\sa120\nowidctlpar\tx1080\tx2880\tx4320\tx7920\tx10700 \f8\fs20 \sbasedon16\snext35 dir 2;}{\s36\fi360\li1080\sa120\nowidctlpar\tx1440\tx2880\tx4680\tx8280\tx10700 \f8\fs20 \sbasedon35\snext36 dir 3;}{\s37\fi360\li1440\sa120\nowidctlpar\tx1800\tx2880\tx5040\tx8640\tx10700 \f8\fs20 \sbasedon36\snext37 dir 4;}{\s38\fi432\li360\sb60\sa120\nowidctlpar \f8\fs20 \sbasedon39\snext38 Normal Indent Special;}{\s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 \sbasedon0\snext39 Normal Indent;}{\s40\qc\li360\sb120\sa360\nowidctlpar \f8\fs20 \sbasedon0\snext0 caption;}{\s41\li360\sb60\sa120\nowidctlpar \f8\fs20 \sbasedon0\snext41 Normal Spaced;}{\s42\li360\sb120\sa120\nowidctlpar\tqc\tx4320\tqr\tx8640 \f8\fs20 \sbasedon0\snext42 header;}{\s43\li360\nowidctlpar\brdrt\brdrs\brdrw15 \tx2700\tqc\tx4320\tqr\tx9720 \b\f8\fs20 \sbasedon0\snext43 footer;}{\*\cs44 \additive\sbasedon10 page number;}{\s45\sb120\sa60\nowidctlpar\tqr\tx8640 \b\f8\fs20 \sbasedon0\snext0 toc 1;}{\s46\li245\sa60\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 \sbasedon0\snext0 toc 2;}{\s47\li475\sa60\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 \sbasedon0\snext0 toc 3;}{\s48\li720\sb120\sa120\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 \sbasedon0\snext0 toc 4;}{\s49\li960\sb120\sa120\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 \sbasedon0\snext0 toc 5;}{\s50\li1200\sb120\sa120\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 \sbasedon0\snext0 toc 6;}{\s51\li1440\sb120\sa120\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 \sbasedon0\snext0 toc 7;}{\s52\li1680\sb120\sa120\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 \sbasedon0\snext0 toc 8;}{\s53\li1920\sb120\sa120\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 \sbasedon0\snext0 toc 9;}{\s54\li360\nowidctlpar \i\f8\fs20 \sbasedon0\snext54 address;}{\s55\li360\nowidctlpar \v\f8\fs40\super \sbasedon0\snext55 anchor;}{\s56\li1440\ri1440\nowidctlpar \i\f8\fs20 \sbasedon0\snext56 blockquote;}{\s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvl11\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 \sbasedon79\snext57 bullet list;}{\s58\fi-360\li1080\sb120\sa120\nowidctlpar\tx900{\*\pn \pnlvl11\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f8\fs20 \sbasedon80\snext58 bullet list 1;}{\s59\fi-180\li1260\nowidctlpar\tx1260 \f8\fs20 \sbasedon81\snext59 bullet list 2;}{\s60\fi-180\li1620\nowidctlpar\tx1620 \f8\fs20 \sbasedon82\snext60 bullet list 3;}{\s61\fi-180\li1980\nowidctlpar\tx1980 \f8\fs20 \sbasedon83\snext61 bullet list 4;}{\s62\fi-180\li2340\nowidctlpar\tx2340 \f8\fs20 \sbasedon84\snext62 bullet list 5;}{\s63\fi360\li1800\sa120\nowidctlpar\tx2160\tx2880\tx5400\tx10700 \f8\fs20 \sbasedon37\snext63 dir 5;}{\s64\li360\nowidctlpar \f8\fs20 \sbasedon0\snext64 footnote text;}{\s65\fi-2520\li2880\sb120\sa120\nowidctlpar\tx2880 \f8\fs20 \sbasedon85\snext65 glossary;}{\s66\fi-2520\li4680\sb120\sa120\nowidctlpar\tx2880\tx4680 \f8\fs20 \sbasedon65\snext66 glossary 1;}{\s67\fi-2520\li5040\sb120\sa120\nowidctlpar\tx2880\tx5040 \f8\fs20 \sbasedon66\snext67 glossary 2;}{\s68\fi-2520\li5400\sb120\sa120\nowidctlpar\tx2880\tx5400 \f8\fs20 \sbasedon67\snext68 glossary 3;}{\s69\fi-2520\li5760\sb120\sa120\nowidctlpar\tx2880\tx5760 \f8\fs20 \sbasedon68\snext69 glossary 4;}{\s70\fi-2520\li6120\sb120\sa120\nowidctlpar\tx2880\tx6120 \f8\fs20 \sbasedon69\snext70 glossary 5;}{\s71\li360\sb120\sa120\nowidctlpar\brdrb\brdrth\brdrw15 \f8\fs20 \sbasedon0\snext0 hr;}{\s72\li360\nowidctlpar \f3\fs20 \sbasedon0\snext72 HTML;}{\s73\fi-720\li1080\nowidctlpar\tx1440 \f8\fs20 \sbasedon85\snext73 menu;}{\s74\fi-720\li1440\nowidctlpar\tx1440 \f8\fs20 \sbasedon86\snext74 menu 1;}{\s75\fi-720\li1800\nowidctlpar\tx1800 \f8\fs20 \sbasedon87\snext75 menu 2;}{\s76\fi-900\li2340\nowidctlpar\tx2340 \f8\fs20 \sbasedon88\snext76 menu 3;}{\s77\fi-1080\li2880\nowidctlpar\tx2880 \f8\fs20 \sbasedon89\snext77 menu 4;}{\s78\fi-1260\li3420\nowidctlpar\tx3420 \f8\fs20 \sbasedon90\snext78 menu 5;}{\s79\fi-720\li1080\sb120\sa120\nowidctlpar\tx1440{\*\pn \pnlvl10\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}\f8\fs20 \sbasedon85\snext79 numbered list;}{\s80\fi-720\li1440\sb120\sa120\nowidctlpar\tx1440 \f8\fs20 \sbasedon86\snext80 numbered list 1;}{\s81\fi-720\li1800\sb120\sa120\nowidctlpar\tx1800 \f8\fs20 \sbasedon87\snext81 numbered list 2;}{\s82\fi-900\li2340\sb120\sa120\nowidctlpar\tx2340 \f8\fs20 \sbasedon88\snext82 numbered list 3;}{\s83\fi-1080\li2880\sb120\sa120\nowidctlpar\tx2880 \f8\fs20 \sbasedon89\snext83 numbered list 4;}{\s84\fi-1260\li3420\sb120\sa120\nowidctlpar\tx3420 \f8\fs20 \sbasedon90\snext84 numbered list 5;}{\s85\fi-720\li1080\sb120\sa120\nowidctlpar\tx1440 \f8\fs20 \sbasedon0\snext85 ol;}{\s86\fi-720\li1440\sb120\sa120\nowidctlpar\tx1440 \f8\fs20 \sbasedon85\snext86 ol 1;}{\s87\fi-720\li1800\sb120\sa120\nowidctlpar\tx1800 \f8\fs20 \sbasedon86\snext87 ol 2;}{\s88\fi-900\li2340\sb120\sa120\nowidctlpar\tx2340 \f8\fs20 \sbasedon87\snext88 ol 3;}{\s89\fi-1080\li2880\sb120\sa120\nowidctlpar\tx2880 \f8\fs20 \sbasedon88\snext89 ol 4;}{\s90\fi-1260\li3420\sb120\sa120\nowidctlpar\tx3420 \f8\fs20 \sbasedon89\snext90 ol 5;}{\*\cs91 \additive\ulnone\nosupersub  Plain;}{\s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 \sbasedon0\snext92 pre;}{\*\cs93 \additive\cf6  Reference;}{\s94\fi-720\li1080\sb120\sa120\nowidctlpar\tx1440{\*\pn \pnlvl10\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}\f8\fs20 \sbasedon79\snext94 small gloss;}{\s95\fi-720\li1440\sb120\sa120\nowidctlpar\tx1440 \f8\fs20 \sbasedon80\snext95 small gloss 1;}{\s96\fi-720\li1800\sb120\sa120\nowidctlpar\tx1800 \f8\fs20 \sbasedon81\snext96 small gloss 2;}{\s97\fi-900\li2340\sb120\sa120\nowidctlpar\tx2340 \f8\fs20 \sbasedon82\snext97 small gloss 3;}{\s98\fi-1080\li2880\sb120\sa120\nowidctlpar\tx2880 \f8\fs20 \sbasedon83\snext98 small gloss 4;}{\s99\fi-1260\li3420\sb120\sa120\nowidctlpar\tx3420 \f8\fs20 \sbasedon84\snext99 small gloss 5;}{\s100\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvl11\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 \sbasedon57\snext100 ul;}{\s101\fi-360\li1080\sb120\sa120\nowidctlpar\tx900{\*\pn \pnlvl11\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f8\fs20 \sbasedon58\snext101 ul 1;}{\s102\fi-180\li1260\nowidctlpar\tx1260 \f8\fs20 \sbasedon59\snext102 ul 2;}{\s103\fi-180\li1620\nowidctlpar\tx1620 \f8\fs20 \sbasedon60\snext103 ul 3;}{\s104\fi-180\li1980\nowidctlpar\tx1980 \f8\fs20 \sbasedon61\snext104 ul 4;}{\s105\fi-1260\li3420\sb120\sa120\nowidctlpar\tx3420 \f8\fs20 \sbasedon0\snext105 ul 5;}{\*\cs106 \additive\f8\fs18\up6 \sbasedon10 footnote reference;}{\s107\fi-400\li400\nowidctlpar\tqr\tx8640 \caps\f8\fs20 \sbasedon0\snext0 table of figures;}}{\info{\title Introduction}{\author Larry Bolef}{\operator Larry Bolef}{\creatim\yr1998\mo7\dy22\hr21\min54}{\revtim\yr1998\mo8\dy25\hr18\min1}{\printim\yr1998\mo9\dy8\hr17\min39}{\version9}{\edmins39}{\nofpages232}{\nofwords73553}{\nofchars371322}{\vern49235}}\paperh15826\margl1080\margr1080\margt2160\margb2160\gutter1440 \facingp\widowctrl\ftnbj\aenddoc\margmirror\hyphcaps0\formshade\fracwidth \fet0\sectd \linex0\headery1440\footery706\colsx709\endnhere\titlepg {\headerl \pard\plain \s42\li360\sb120\sa120\nowidctlpar\brdrb\brdrs\brdrw15 \tqr\tx8640 \f8\fs20 {\field{\*\fldinst {\cs44  PAGE }}{\fldrslt {\cs44 2}}}{\cs44 \tab }{\field{\*\fldinst {\cs44  STYLEREF "Heading 1"\\n \\* MERGEFORMAT }}{\fldrslt {\cs44 1}}}{\cs44     }{\field{\*\fldinst {\cs44  STYLEREF "Heading 1" \\* MERGEFORMAT }}{\fldrslt {\cs44\b Introduction}}}\par }{\headerr \pard\plain \s42\li360\sb120\sa120\nowidctlpar\brdrb\brdrs\brdrw15 \tqr\tx8640 \f8\fs20 {\field{\*\fldinst {\cs44  STYLEREF \\n"Heading 1" \\* MERGEFORMAT }}{\fldrslt {\cs44 1}}}{\cs44    }{\field{\*\fldinst {\cs44  STYLEREF "Heading 1" \\* MERGEFORMAT }}{\fldrslt {\cs44 Introduction}}}{\cs44 \tab }{\field{\*\fldinst {\cs44  PAGE }}{\fldrslt {\cs44 37}}}\par }{\*\pnseclvl1\pndec\pnprev1\pnstart1\pnindent360\pnhang{\pntxta .}}{\*\pnseclvl2\pndec\pnprev1\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnprev1\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pndec\pnprev1\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl5\pndec\pnprev1\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl6\pndec\pnprev1\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl7\pndec\pnprev1\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl8\pndec\pnprev1\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl9\pndec\pnprev1\pnstart1\pnindent720\pnhang{\pntxta .}}\pard\plain \li360\sb1080\sa120\nowidctlpar \f8\fs20 {\b\f9\fs32 {\*\bkmkstart Heading1}{\*\bkmkstart _Ref393792705}Multimission Image Processing Laboratory\par }\pard \li360\sb1080\sa120\nowidctlpar {\b\f9\fs48 Building and Delivering VICAR Applications}{\b\f9\fs32 \par }\pard \li360\sb1080\sa120\nowidctlpar {\b\f9\fs32 R. Deen\line L. Bolef\par }\pard \li360\sb1080\sa120\nowidctlpar {\b\f9 Jet Propulsion Laboratory\line }{\f9 California Institute of Technology\line Pasadena, California}{\b\f9\fs32 \par }\pard \li360\sb120\sa120\nowidctlpar {\f9 JPL D-16065\par }\pard \li360\sb120\sa120\nowidctlpar {\b Copyright \'a9 1998, California Institute of Technology. All rights reserved. U.S. Government sponsorship under NASA Contract NAS7-1270 is acknowledged.\par }\pard \li360\sb120\sa120\nowidctlpar {\b Contact:}Robert Deen, {\cf6 Robert.G.Deen@jpl.nasa.gov}.\par \trowd \trgaph108\trleft-108 \cellx6660\cellx8748 \pard \sb240\sa120\nowidctlpar\intbl {\b\f9 {\pict\macpict\picw76\pich64\picwgoal1520\pichgoal1280 fe00000000000040004c001102ff0c00fffe00000048000000480000000000000040004c00000000001a00001d1d7b7b0001000a000000000040004c0081000a000000000000000000a00082001a0000000000000098804c000000000040004c0000000000000000004800000048000000000008000100080000000002a1e0d4000000000000f3b78000006e0000ffffffffffff000100002a2d8c8c0002000028d67a7a000300003ab972720004000031338c8c00050000313294940006000038c27a7a00070000393984840008101039398484000900003a3c8c8c000a000044946262000b00003b3c9494000c0000469f6a6a000d000047b47a7a000e373629296363000f000046478c8c001000004d946a6a001100004e9f72720012bcbc000000000013000046489c9c001400004faa7a7a001500004d4d8484001600004a4b94940017c6c600000000001800004b4c9c9c0019cece00000000001a000049d7a4a4001b000051a97a7a001c403e31317b7b001d00005a5b8484001e17ec49c2729e001f000054548c8c0020d6d6000000000021dede00000000002238ee38ef8bd6002320f049dd8bbc0024acc20ffa53dd002500005b5b9c9c0026e6e6000029fa0027c6c614130000002810105d5d94940029cece08085755002afefd00010001002b42424d4d8484002c9bc820f47ad2002dd6d61d1c0000002e30f159e593d3002f59e449e97adb00305a5952528c8c0031498e5ab1bd7800325a5a666794940033424275759c9c00345a5a6f6f9c9c003583fe6aff93ff003659ff86ffa4ff00379c356ad17af10038bdbd6562393900396b6b8687b5b5003a83827b7ba5a5003bdeb972d5385d003c8bfc940ea534003da5348bfc940e003eb5508bf0a52a003f93fc9c10b54c004083ddb045bd630041deab9c007aad0042e7b893c293c20043adadadada5a500449c02bd56bd560045adadb5b5bdbd0046e7e7a5a5b0af0047c656b524bd3b0048bdbdbdbdb5b50049e7e7b5b5bdbc004aad0cce6ece6e004bc6c6c6c6c6c6004ca5a5d9d9e7e7004dc6c6cececece004ececececedede004fefefc5c4bdbd0050efb7c5fdce210051e7e7cecebdbd0052d6d6d6d6cece0053d634d634e7880054e7e7d6d5bdbd0055d6d6deded6d60056d6d6dededede0057efb0d634ce0c0058dedededed6d60059e792de69ce22005aefa7d61dde49005be77bde49de49005ce77bde49e77b005dd61defa7e77b005eefb0e788ce0c005fe77be77bde490060e7e7e7e7efef0061efefe7e7e7e70062efeff7f7efef0063f7c5e750de0f0064e7e7efefe7e70065f7f7e7e7efef0066f7d3efa6cdf10067f7c5ef8bde0f0068f7f7efefe7e70069f7f7f7f7e7e7006afffff7b8dddd006bfffff7f7efef006cf7f7ffffefef006d00001ce27a7a006e000000000000000000000040004c000000000040004c000006ca62005ded6202b56202b56213e2620459513c3423fe0705062e343f545ee26215e56204593a230916fa0f07130f160f0f083c58e5621ae862045843230f16f90f013a09fe0f070909160f0f084855e86216ea62025e3f09f50f042e090f0f18fa0f02074558ea621feb62015408fd0f0009fc0f011316fb0f02131639fe0f0013fe0f010759eb6221ec620035f80f0009fe0f013362fa0f016c07fe0f06160f0f160f3d58ef620151602dee6202542316fd0f0009fc0f1123050f09340f0f09310f4068625b33181616fe0f03130f0b54f26203612d19622def62015409f80f05130f0f0b452efe0f13130f47070f0962090f130f0f130f0f13090f165ff462045519195a622af062015109fc0f0013fb0f06130f0923390f6cfb0f0439090f0f13fb0f0216160ff56205381919275f6230f1620259160ffd13010f13fe0f011609fe0f0065fe0f0009fe0f010909fc0f0013f90f011f0ff8620058fd190246626227f262015809f80f07396c626c4a080f09fb0f012340fa0f0013f80f011654fb62014320fd19fe6231f362015807fb0f0b13130f623f040909084d6239fd0f05090f0f070f13f80f0809090f180916160955fe620058fb19fd6230f362003afa0f05090f47340909fd0f03093f622efb0f06133409130f1313fd0f0009fb0f04163e626238fb19003bfd622ff462015716f90f0309650909fd0f08340f0f0456560f1309fe0f0347091609f70f05130f0f090d41fa19011765fd6233f4620007fd0f0016fd0f082e450f3939090f0536fd0f0334620f09fe0f02160916fe0f0013fd0f0009fe0f02090d20f819fb6229f56202451616fe0f01130ffe1301343ffd0f042347623f13fe0f010865ef0f020d2617f8190061fb6235f562160f16160f13130f0f130f0f343f0f1309620f09340f1616fe0f093a620f0f160f130f1313fe0f06130f0f090d2617f719f96229f662003ff90f0e130f0f31450f1313090f09050f1609fd0f012e62fb0f0013fd0f02091d2af519f8622bf66204040f160f13fe0f0013fe0f01075cfb0f0013f90f052b620f090f13fd0f020d1f20f519012468f8622df762063a0f0f090f0f09fa0f016805fd0f03090f0f13f90f0662230f0f07031cf819012130fe19022f1134f7622af7620004f40f034d2e0f13f90f0013fe0f07130f07620b1d2427f91902212f2ffe19041e0d160f58f8622df762fe0f0013fd0f0a13130f0f1313314b0f1313f40f030d226217f9190c212b0d2419192110230f0f165ff8623cf8620045fe0f10130f0f13130f0f130f130f0968090f1313fe0f03130f0f13fe0f050d0e21193862fb190a271e0d0c271919270d160ffe160066f8623cf86203320f0f09fc0f0009fe0ffe090f4b340f090905070404050f0909232417fe190a175741193b17240d0d0934fe1902370909fe0f02161634f8623df8620004fd0f0f5c6268626c0b0f0565624508610f0f09fe62046668392f27fd1907496868626b686208fe0f0d2817191950684d16090f0f16160ff8623df8620009fd0f010768fe620b40160f3962160968230f1334fe62016862fc190f6565624124036262090f0d1c17191969fe680216160ffe1601255ff9623df862fe0f17130f0968676762620f0f39670f0f344e0f0d4d5762686268fc190f6562680d0f16324d090d241919176267fe620704160f0f16161f58f9623ff96206670f0f130f0f09fd6216683c16366216090d6c271762296c6662623b1919212f68fe62153416166c02211919246b4d6b6267624a16160f16161ff8623df962015e16fd0f0c09623f626268620936621f2421fe190a6217426862625a24110d16fd621067625c28621919281d620834626b62621ffd16001ff8623af9620f5816130f130f07620f62626762473e62fc19043b62271965fe620509160f0f4768fd620e29194f291b1f32680f166867626201fc16f8623ef962005efe0f0c130f0968133a686668623b6817fd191050572f116262676234160f16163f626862fe190c2969161663620f16626267673ffd16000ff8623cf9620b67160f0f130f09681c2c6568fe6215681719212c1f62626c6b6262676262160f16160f0935fe19086262344a1668686b68fd620068fc16f8623cf862fe0f12230d0d6217193868686268651f100d09046868fe62096862676216130f0f0d21fe190662686216621668fe3f05406262676207fd16f8623df86206150f111f191968fe19fc621e090f0f0939623962160f62686862160f0f62211919245562685e183c586218fe16096c6267624a160f161f58f9623df862190328271919176219220c2362626868230f0f0762621862391662fe68053f0d24171917fd620a5b161609626809160f1669fd6203391f161ff8623df862012d17fe190c65635a2e090f434745453f070ffe3902340f62fc3a1232191917243f62674007160909015b6d010f0ffe0406070505040f0f2ef8623bfa62014b17fe19032b1e0909fd0f0016fc0f02160f40fe0f052e68070f0d0dfe19010f0ffe09fe0f05160f0f233f09fd0f010716fd0f011651f86239fc62016417fe19042b0c0d0f09f40f013909fe0f093f6207231717240d090ffe09020f0f16fe0f0e16620f620f180f2e130f16180f0f67f86232fd6209381719192d6505090f16ed0f064e2d19190f0909fd0f151616130f160f6c2e62090f041609624a28090f161f58f86236fd62fe19075a6262340f0f1609fe0f0009f90f0013fd0f090d1521191739160f1f09f80f0e622340010f620f0f4d2b1a0f0f1634f76235f762006bfd0f005afe0f02096209fb0f0b34230d221919211e3f685609fb0f08130f0f402e0f3f1834fd0f06041f620f161f5ef7622ff6620034fa0f010945f90f0c0d241917240d0f0f45684a0f09fb0f1016230709620340160f0f16450f450f1634f66230f562011313fc0f0031fd0f0009fe0f0014fe1901220dfd0f014d01fd0f0013f90f0b09392e3416182e16160f1668f66235f56202340f09fe0f01054efe0f0b132e0f091c1919260c091616fc0f0013fd0f0009fd0f0d230f0f39040f0440160f4518163af5622cf462020f0f13fd0f0b5c3f1323310d2419190e0d09fd0f0009f50f0d323f160f6213163462390f3f1816f46237f762186062624b0f130f130f0945340f0f0d1719191e0d160f0f2e39fb0f0333230f16fe0f0013fe0f06393f130f04620ffe160063f4622ef362013409fa0f051e1219170a09fd0f05394e160f1313fc0f09094b452e0509074a4b18fe0f04620f160f39f36230f2620009fc0f01091ffe19010d09fd0f0013fe0f013334fe0f0009fe130f160930536261221613130f160f0f161ff26227f1620013fe0f0509231919240dfd0f012339fd0f0309050f13f60ffe180613130f090f166af2623106626b6269626269f7620e0f0f092319192f0c160f0f3f0f233cfe0f044e090f0f09fc0f011309fa0f04130f130f16f06227f0620652092f19192309fd0f015309fc0f003ffc0f08130f0f130f09311618fc0f02161816ef622bef620e3b19191f090f0f094c6c626c4d0913fb0f0013fb0f01072bfe0f06130f130f160f66fc620069f56226f0620b3717192f160f0f130f130f62fa0f0009fc0f0409130f0f13fe0f05131316131616ed6232fb620069fe6202696965fe62083719195a6244090f13fe0f0045fe0f0013fe0f03090f0f13fb0f0313130f18fd0f0045ec6228006bfe620069f7620341191957fd6203050f0f13fd0f0009fe0f0013fa0f0009fa0f0218096beb6226076b626269626c626cfa620327195765fb620005f80f0413160f0f13f90f041316165b69ea6227006bfd62006cf762004ff7620708130f0f130f0f13fe0f03180f1616fe0f0518131804626ce8621e016269f9620269626bf262026c4e08fa0f09161818160f160f09456ce562280262626bfe620069fe62026b626cfe620069f0620a39230409050501343f6b6cfe620269626ce86223fe62076c6c62626c626269fd6202696269f6620069f162006bfe620069fc62006cee620e066962626c62626bfe620069c06200a0008300ff}}{\b\f9 \cell }\pard \sb480\nowidctlpar\intbl {\b\fs56 {\pict\macpict\picw81\pich28\picwgoal1620\pichgoal560 fe0000000000001c0051001102ff0c00fffe0000004800000048000000000000001c005100000000001affffffffffff0001000a00000000001c00510081000a000000000000000000a00082001a0000000000000098805200000000001c00510000000000000000004800000048000000000008000100080000000002a1e2d0000000000000fa7f800000020000ffffffffffff0001fefd00010001000200000000000000000000001c005100000000001c0051000002af000ef100f901fe00ea01fa00f901f0000ef100f901fe00e801fc00f901f0000ef100f901fe00e701fd00f901f0000ef100f901fe00e601fe00f901f0000ef100f901fe00e601fe00f901f0000ff100f901fe00e501010000f901f0000ff100f901fe00e501010000f901f00013f100f901fe00fa01f400f901010000f901f00012f100f901fe00fa01f300f9010000f901f00012f100f901fe00fa01f300f9010000f901f00012f100f901fe00fa01f300f9010000f901f00012f100f901fe00fa01f300f9010000f901f00013f100f901fe00fa01f400f901010000f901f0000ff100f901fe00e501010000f901f00013f100f901fe00fa010000ed01010000f901f00012f100f901fe00fa010000ee01fe00f901f00013f100f901fe00fa01010000ef01fe00f901f00013f100f901fe00fa01010000f001fd00f901f00012f100f901fe00fa01fe00f201fc00f901f00012f100f901fe00fa01fe00f401fa00f901f0000efd00ed01fe00fa01ea00ec01fd000efd00ed01fe00fa01ea00ec01fd000efe00ec01fe00fa01ea00eb01fe000efe00ec01fe00fa01e900ec01fe0010010000eb01fe00fa01e900eb0101000010010000ec01fd00fa01e800ec010100000e0000ec01fc00fa01e700ec01000000a0008300ff}}{\b\f9 \cell }\pard \widctlpar\intbl {\b\f9 \row }\pard\plain \s45\sb120\sa60\nowidctlpar\tqr\tx8640 \b\f8\fs20 \page {\field\fldedit{\*\fldinst  TOC \\o "1-3" }{\fldrslt \par \pard \s45\sb120\sa60\nowidctlpar\tqr\tx8640 1. Introduction\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910608  {\field{\*\fldinst  PAGEREF _Toc429910608 }{\fldrslt 3}}}}\par 2. vimake\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910609  {\field{\*\fldinst  PAGEREF _Toc429910609 }{\fldrslt 3}}}}\par \pard\plain \s46\li245\sa60\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 2.1 Creating and Using a VICAR Imakefile\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910610  {\field{\*\fldinst  PAGEREF _Toc429910610 }{\fldrslt 4}}}}\par 2.2 Valid vimake Commands\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910611  {\field{\*\fldinst  PAGEREF _Toc429910611 }{\fldrslt 10}}}}\par \pard\plain \s47\li475\sa60\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 2.2.1 Module Type Macros\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910612  {\field{\*\fldinst  PAGEREF _Toc429910612 }{\fldrslt 10}}}}\par 2.2.2 Name List Macros\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910613  {\field{\*\fldinst  PAGEREF _Toc429910613 }{\fldrslt 10}}}}\par 2.2.3 Main Language Macros\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910614  {\field{\*\fldinst  PAGEREF _Toc429910614 }{\fldrslt 13}}}}\par 2.2.4 Languages Used Macros\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910615  {\field{\*\fldinst  PAGEREF _Toc429910615 }{\fldrslt 14}}}}\par 2.2.5 Build Flag Macros\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910616  {\field{\*\fldinst  PAGEREF _Toc429910616 }{\fldrslt 16}}}}\par 2.2.6 Program Class Macros\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910617  {\field{\*\fldinst  PAGEREF _Toc429910617 }{\fldrslt 17}}}}\par 2.2.7 Subroutine Class Macros\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910618  {\field{\*\fldinst  PAGEREF _Toc429910618 }{\fldrslt 18}}}}\par 2.2.8 Documentation Macros\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910619  {\field{\*\fldinst  PAGEREF _Toc429910619 }{\fldrslt 18}}}}\par 2.2.9 Library Macros\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910620  {\field{\*\fldinst  PAGEREF _Toc429910620 }{\fldrslt 19}}}}\par \pard\plain \s46\li245\sa60\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 2.3 Using the Generated VMS Build File\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910621  {\field{\*\fldinst  PAGEREF _Toc429910621 }{\fldrslt 24}}}}\par 2.4 Using the Generated UNIX makefile\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910622  {\field{\*\fldinst  PAGEREF _Toc429910622 }{\fldrslt 27}}}}\par \pard\plain \s45\sb120\sa60\nowidctlpar\tqr\tx8640 \b\f8\fs20 3. Application Packer\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910623  {\field{\*\fldinst  PAGEREF _Toc429910623 }{\fldrslt 29}}}}\par \pard\plain \s46\li245\sa60\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 3.1 vpack\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910624  {\field{\*\fldinst  PAGEREF _Toc429910624 }{\fldrslt 29}}}}\par 3.2 vunpack\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910625  {\field{\*\fldinst  PAGEREF _Toc429910625 }{\fldrslt 34}}}}\par 3.3 Test Routines\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910626  {\field{\*\fldinst  PAGEREF _Toc429910626 }{\fldrslt 35}}}}\par \pard\plain \s45\sb120\sa60\nowidctlpar\tqr\tx8640 \b\f8\fs20 4. Appendix A: About This Document\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910627  {\field{\*\fldinst  PAGEREF _Toc429910627 }{\fldrslt 36}}}}\par \pard\plain \s46\li245\sa60\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 4.1 Document Source\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910628  {\field{\*\fldinst  PAGEREF _Toc429910628 }{\fldrslt 36}}}}\par 4.2 Generating HTML Version\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910629  {\field{\*\fldinst  PAGEREF _Toc429910629 }{\fldrslt 36}}}}\par 4.3 Changing or Adding to this Document\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910630  {\field{\*\fldinst  PAGEREF _Toc429910630 }{\fldrslt 36}}}}\par \pard\plain \s47\li475\sa60\nowidctlpar\tqr\tldot\tx8640 \f8\fs20 4.3.1 Styles used in this Document\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910631  {\field{\*\fldinst  PAGEREF _Toc429910631 }{\fldrslt 37}}}}\par 4.3.2 Formatting Hints and Kinks\tab {\field{\*\fldinst  GOTOBUTTON _Toc429910632  {\field{\*\fldinst  PAGEREF _Toc429910632 }{\fldrslt 37}}}}\par \pard\plain \li360\sb120\sa120\nowidctlpar \f8\fs20 }}\pard\plain \li360\sb120\sa120\nowidctlpar \f8\fs20 \sect \sectd \marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\guttersxn0\linex0\endnhere {\headerl \pard\plain \s42\li360\sb120\sa120\nowidctlpar\brdrb\brdrs\brdrw15 \tqr\tx8640 \f8\fs20 {\field{\*\fldinst {\cs44  PAGE }}{\fldrslt {\cs44 26}}}{\cs44 \tab }{\field{\*\fldinst {\cs44  STYLEREF "Heading 1"\\n \\* MERGEFORMAT }}{\fldrslt {\cs44 2}}}{\cs44     }{\field{\*\fldinst {\cs44  STYLEREF "Heading 1" \\* MERGEFORMAT }}{\fldrslt {\cs44 vimake}}}\par }{\headerr \pard\plain \s42\li360\sb120\sa120\nowidctlpar\brdrb\brdrs\brdrw15 \tqr\tx8640 \f8\fs20 {\field{\*\fldinst {\cs44  STYLEREF \\n"Heading 1" \\* MERGEFORMAT }}{\fldrslt {\cs44 2}}}{\cs44    }{\field{\*\fldinst {\cs44  STYLEREF "Heading 1" \\* MERGEFORMAT }}{\fldrslt {\cs44 vimake}}}{\cs44 \tab }{\field{\*\fldinst {\cs44  PAGE }}{\fldrslt {\cs44 25}}}\par }{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\bkmkstart Heading52}{\*\bkmkstart Heading36}{\*\bkmkstart _Toc429910608}{\*\bkmkend Heading1}{\*\bkmkend _Ref393792705}{\pntext\pard\plain\b\fs36\cchs0 1.\tab}\pard\plain \s1\sb240\sa240\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f8\fs36 Introduction{\*\bkmkend _Toc429910608}\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 This manual describes how to build (compile and link) VICAR programs, to package the parts of the application, and to write the test scripts necessary for class 2 (R2LIB) delivery to the VICAR system. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar Before changing or editing this manual, please see {\field{\*\fldinst {\cf6  REF _Ref428698490 \\n }}{\fldrslt {\cf6 4}}} {\field{\*\fldinst  REF _Ref428698497 \\* MERGEFORMAT }{\fldrslt Appendix A: About This Document}}{\scaps  (page }{\field{\*\fldinst {\scaps  PAGEREF _Ref428698500 }}{\fldrslt {\scaps 36}}}{\scaps )}.\par {\*\bkmkstart _Ref393876421}{\*\bkmkstart _Toc429910609}{\pntext\pard\plain\b\fs36\cchs0 2.\tab}\pard\plain \s1\sb240\sa240\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f8\fs36 vimake{\*\bkmkend _Ref393876421}{\*\bkmkend _Toc429910609} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Most UNIX programs come with a \ldblquote makefile\rdblquote  that is run with the UNIX command {\cs33\f3 make} to compile and link the program. The makefile describes everything needed to build the program, including compiler options, linker libraries, and location of manual (man) pages. {\cs33\f3 make} has many advantages, including compiling only what has changed since the last compile. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar The preferred method for the VMS operating system is to have compile and link statements directly in a {\cs33\f3 \ldblquote .COM\rdblquote } file that contains all the application parts. These are extracted and compiled in one step. The use of an independent command procedure to build the program under VMS has many advantages. It allows the application COM file to be separate. It works on all VMS machines, since DCL is standard. And it is fast, since no subprocesses need to be created.\par To build applications under UNIX, it is highly desirable to use {\cs33\f3 make} with a makefile. To build under VMS, it is desirable to use DCL with a command procedure. The makefile and the command procedure are incompatible. Worse yet  there is quite a bit of variation required for makefiles on different UNIX machines. The commands used often vary, and sometimes there are differences in the format and capabilities of {\cs33\f3 make} itself. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar It would be very cumbersome to require the VICAR application programmer to maintain two sets of build files for every application (for VMS and UNIX). Furthermore, the differences in UNIX makefiles would make it almost impossible to come up with a single makefile for all UNIX systems. A program called imake has been written to solve these problems. \par {\cs33\f3 imake} is used extensively in the X-windows system to build it on many platforms. TAE uses it as well. {\cs33\f3 imake} generates makefiles. It uses the C preprocessor for macros and conditional statements to customize the generated makefile for a particular platform. The input  {\cs33\f3 \ldblquote imakefile\rdblquote  }is a reduced makefile that contains only the program-specific parts, not the system-specific parts.\par A template file provides the system-specific parts of the makefile for each machine type. The imake program does some minor cleanup on the imakefile, runs it and the template through the C preprocessor, and does some cleanup on the output. The result is a makefile that is customized for the system you are on. \par This helps to create UNIX makefiles, but what about VMS? If you are familiar with {\cs33\f3 imake}, you know that the imakefiles are similar to makefiles. There is a set of rules and definitions that are set up at the top of the makefile, but the structure of the imakefile is retained in the makefile. It would be impossible to generate a VMS command procedure from a typical imakefile. \par The VICAR program vimake takes the concept of imake and goes one step further. Since the compile and link statements for all VICAR programs are quite similar, they do not need to be specified at all in the imakefile. In fact, vimake extracts {\i all} of the control out of the imakefile, leaving only C preprocessor commands. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar The VICAR imakefile contains only a description of {\i what} is to be built, not {\i how} to build it. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar A VICAR imakefile has only C preprocessor statements, mostly {\cs33\f3 #define}'s and a few {\cs33\f3 #if}'s. These #define statements set up the filenames used in the program, and select various options on how to build the program. The vimake program uses this information and a system-specific template to create a build file for any system. Under VMS, it creates a DCL command file that will build the program. Under UNIX, it creates a makefile instead. The makefile and DCL command file are never delivered with the program; only the imakefile is. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar There are many advantages to this scheme:\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 The programmer need only create one imakefile, instead of separate build files for each system. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}It is much easier to create the imakefile than it would be to create a full-blown build file.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}Build files are standardized, since they are created entirely by the vimake templates, and never modified by the application programmer.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}Locations of libraries and other files are standardized, since the imakefile doesn't specify where the library is, just what library it wants. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}Changing the way applications are built is easy. only the templates need to change, and all applications will be built the new way. \par {\*\bkmkstart Heading23}{\*\bkmkstart _Toc429910610}{\pntext\pard\plain\b\fs28\cchs0 2.1\tab}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 Creating and Using a VICAR Imakefile{\*\bkmkend Heading23}{\*\bkmkend _Toc429910610} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Since vimake is based on the C preprocessor, every line in an imakefile will be a C preprocessor command. Most lines will be \ldblquote #define\rdblquote , with some comments and \ldblquote #if\rdblquote  statements on occasion. Comments are allowed, in the standard C style: enclosed by {\cs33\f3 /* and */}. \par \pard\plain \li360\sb120\sa120\nowidctlpar \f8\fs20 Following is an example imakefile for the program gen:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 #define PROGRAM gen \line #define MODULE_LIST gen. c \line #define MAIN_LANG_C \line #define USES_C \line #define R2LIB \line #define LIB_RTL \line #define LIB_TAE\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The first two lines define macros with values. PROGRAM specifies that this is an application program, rather than a subroutine. It also specifies the name of the application. MODULE_LIST t ells vimake what source code modules make up the application. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar The rest of the lines simply define switches; there are no values associated with them. MAIN_LANG_ C tells vimake that the main program is written in C (or ANSI C). USES_C says that some (non-ANSI) C is used in the application, because there is more than one module with mixed languages. R2LIB says that this application goes in R2LIB. The LIB_RTL and LIB_TAE switches indicate which libraries to link with, in this case the RTL and TAE libraries. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar Due to the internals of how vimake operates, there is unfortunately no real error checking. you have to be sure to spell the macros correctly, or they will simply be ignored. This may cause surprising results. If vimake is not operating the way you expect, first check to make sure that all the preprocessor macros are spelled correctly. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar vimake can also handle some machine dependencies. All the macros defined in xvmaininc.h are available for use in #if statements. This is typically used to compile a VMS-specific module only under VMS, and its UNIX-specific counterpart only under UNIX.\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar To use an imakefile, simply type the command vimake followed by the name of the imakefile. imakefiles must have a \ldblquote .imake\rdblquote  extension, but you should not extension on the vimake command. The command is the same under both VMS and UNIX. {\cs33\f3 vimake gen }If you are running VMS, a file called \ldblquote gen.bld\rdblquote  will be created (although it is a DCL COM file, a \ldblquote .com\rdblquote  extension would confuse it with the packed application file). This file can be executed to compile and link the program: {\cs33\f3 $ @gen.bld }There are many options you can give on the command line to control the build, which are described in Section {\field{\*\fldinst {\cf6  REF _Ref393878982 \\n }}{\fldrslt {\cf6 2.3}}} {\field{\*\fldinst  REF _Ref393878982 \\* MERGEFORMAT }{\fldrslt Using the Generated VMS Build File}}{\scaps  (page }{\field{\*\fldinst {\scaps  PAGEREF _Ref393878982 }}{\fldrslt {\scaps 24}}}{\scaps )}. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar If you are running UNIX, a file called \ldblquote gen.make\rdblquote  will be created when you run vimake. This file can be submitted to {\cs33\f3 make} to compile and link the program: \par There are many different build targets you can give to control the build process, which are described in Section {\field{\*\fldinst {\cf6  REF _Ref393879042 \\n }}{\fldrslt {\cf6 2.4}}} {\field{\*\fldinst  REF _Ref393879042 \\* MERGEFORMAT }{\fldrslt Using the Generated UNIX makefile}}{\scaps  (page }{\field{\*\fldinst {\scaps  PAGEREF _Ref393879042 }}{\fldrslt {\scaps 27}}}{\scaps )}. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar The imakefile is actually composed of several parts. These parts are described below, with some examples. Although they can be in any order, the parts should generally follow the order listed below for consistency. For a complete list of valid #define's, see the next section. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b Type and name of program unit. }The valid types are PROGRAM, SUBROUTINE, and PROCEDURE. One of these must be defined. The value for the definition is the name of the program or subroutine. The type of the program unit determines which of the other vimake features are available. There is currently not much to be done for a PROCEDURE, but an imakefile must still be present, for consistency. Documentation may still need to be built for procedures.\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 #define PROGRAM logmos \line #define SUBROUTINE knuth \line #define PROCEDURE midrarch \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b List of modules and includes. }The names of all source code modules must be defined ( this does not apply to PROCEDUREs). MODULE_LIST should contain the names of all the compilable source code, with the appropriate extension. In UNIX style, FORTRAN modules must end in \ldblquote .f\rdblquote , {\i not} \ldblquote .for\rdblquote . The modules are listed in the order they should be linked; i.e.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The main module should be first (this can be overridden by LINK_LIST). INCLUDE_LIST should contain the names of all include files that are local to the program or subroutine, i.e. ones that are in the application COM file and not in p2$inc ($P2INC in UNIX). They should also have the appropriate filename extension. Both lists are space-separated (not tab-separated) lists of names. All the names {\i must} be in lower case. If you run out of room on a line, the standard C preprocessor continuation character can be used, which is a backslash \ldblquote \\\rdblquote  at the end of the line, or use continuation lists. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar FORTRAN system includes are a special case. They should be listed in the FTNINC_LIST macro, even though they are not a part of the program unit. See {\field{\*\fldinst {\cf6  REF Heading26 \\n }}{\fldrslt {\cf6 2.2.2}}} {\field{\*\fldinst  REF Heading26 \\* MERGEFORMAT }{\fldrslt Name List Macros}}{\scaps  (page }{\field{\*\fldinst {\scaps  PAGEREF Heading26 }}{\fldrslt {\scaps 10}}}{\scaps )}, for a description of which includes go in FTNINC_LIST. Local includes, which are part of the application, go in INCLUDE_LIST instead. Example:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 #define MODULE_LIST copy.f\line \line #define MODULE_LIST logmos.c logmos_subs.c logmos_mosaic.c\line #define INCLUDE_LIST logmos_defines.h logmos_structures.h \\ logmos_globals.h\line \line #if VMS_OS\line #define MODULE_LIST amosids.f camosids.c amosufo_vms.mar\line #define CLEAN_OTHER_LIST amosufo_unix.c\line #else\line #define MODULE_LIST amosids.f camosids.c amosufo_unix.c\line #define CLEAN_OTHER_LIST amosufo_vms.mar\line #endif\line \line #define MODULE_LIST prog.f\line #define INCLUDE_LIST myinc.fin\line #define FTNINC_LIST errdefs sublib_inc\line \line #define MODULE_LIST view.c utils.c image.c vdt.c plot.c \\ host.c overlap.c vprofile.c\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 VMS macro (.mar) and array processor files (.vfc) are allowed by vimake, but are VMS specific. When MODULE_LIST is defined differently for different machines, make sure the unused source code is listed in CLEAN_OTHER_LIST so a clean-source operation can find all the source code to delete. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b Main language. }If the application is of type PROGRAM, then the language the main program is written in must be defined. This is used by the UNIX version of vimake to determine which command to use to link the program. The main program is defined as the one that the {\cs33\f3 main44} subroutine is written in. The languages that any other modules are written in do not matter.\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 #define MAIN_LANG_C \line #define MAIN_LANG_ FORTRAN \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b Languages used. }Define a USES macro for each language used:\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s58\fi-360\li1080\sb120\sa120\nowidctlpar\tx900{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f8\fs20 USES_C for modules are written in Kernighan and Ritchie (K&R) C (which is the case for most VICAR code).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}USES_ANSI_C for modules written in ANSI C (USES_C and USES_ANSI_C are mutually exclusive). \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s58\fi-360\li1080\sb120\sa120\nowidctlpar\tx900{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}USES_ FORTRAN for modules written in FORTAN. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s58\fi-360\li1080\sb120\sa120\nowidctlpar\tx900{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}USES_MACRO (VMS macro:.mar) and USES_VFC (array processor files: .vfc) are VMS-specific. \par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 #define USES_C \line #define USES_FORTRAN \line #if VMS_OS \line #define USES_MACRO \line #endif\par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The vimake system also has the capability to support various kinds of scripts. This is an extension of the PROCEDURE type, which previously has been used only for PDF procedures and has not been very useful.\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar In order to deliver a script, define the imake file as a PROCEDURE type, then list the scripts in MODULE_LIST. Define the appropriate USES_* macro(s) (see below) and deliver. All other standard vimake rules apply (for instance, you should define the appropriate library, e.g. R2LIB). The scripts can be packed either as pdf's (-p) or as source (-s), but source is probably better.\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar For backwards compatibility, a PROCEDURE with no module list is assumed to have xxx.pdf as its only module (where xxx is the procedure name). This covers most of the existing procedures, but modules with more than on pdf will eventually need to be modified to list them all. They will work as-is for now, but when we move to an install-based system for builds in the future, where we build in one directory and install the results into another, they won't, so update them as you can.\par \trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 \trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx1948\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx3409\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cellx8748 \pard \s39\sb120\sa120\nowidctlpar\intbl {\b USES_ name\cell }\pard \s39\sb120\sa120\nowidctlpar\intbl {\b Extension\cell }\pard \s39\sb120\sa120\nowidctlpar\intbl {\b Disposition\cell }\pard\plain \widctlpar\intbl \f8\fs20 {\b \row }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 \trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx1948\clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx3409\clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cellx8748 \pard\plain \s39\sb120\sa120\nowidctlpar\intbl \f8\fs20 USES_PDF\cell \pard \s39\sb120\sa120\nowidctlpar\intbl .pdf\cell \pard \s39\sb120\sa120\nowidctlpar\intbl left alone for now\cell \pard\plain \widctlpar\intbl \f8\fs20 \row \trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 \trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx1948\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx3409\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cellx8748 \pard\plain \s39\sb120\sa120\nowidctlpar\intbl \f8\fs20 USES_SH\cell \pard \s39\sb120\sa120\nowidctlpar\intbl .sh\cell \pard \s39\sb120\sa120\nowidctlpar\intbl renamed without extension, chmod +x\cell \pard\plain \widctlpar\intbl \f8\fs20 \row \pard\plain \s39\sb120\sa120\nowidctlpar\intbl \f8\fs20 USES_CSH\cell \pard \s39\sb120\sa120\nowidctlpar\intbl .csh\cell \pard \s39\sb120\sa120\nowidctlpar\intbl renamed without extension, chmod +x\cell \pard\plain \widctlpar\intbl \f8\fs20 \row \pard\plain \s39\sb120\sa120\nowidctlpar\intbl \f8\fs20 USES_KSH\cell \pard \s39\sb120\sa120\nowidctlpar\intbl .ksh\cell \pard \s39\sb120\sa120\nowidctlpar\intbl renamed without extension, chmod +x\cell \pard\plain \widctlpar\intbl \f8\fs20 \row \pard\plain \s39\sb120\sa120\nowidctlpar\intbl \f8\fs20 USES_BASH\cell \pard \s39\sb120\sa120\nowidctlpar\intbl .bash\cell \pard \s39\sb120\sa120\nowidctlpar\intbl renamed without extension, chmod +x\cell \pard\plain \widctlpar\intbl \f8\fs20 \row \pard\plain \s39\sb120\sa120\nowidctlpar\intbl \f8\fs20 USES_PERL\cell \pard \s39\sb120\sa120\nowidctlpar\intbl .perl or .pl\cell \pard \s39\sb120\sa120\nowidctlpar\intbl renamed without extension, chmod +x, left alone on VMS\cell \pard\plain \widctlpar\intbl \f8\fs20 \row \pard\plain \s39\sb120\sa120\nowidctlpar\intbl \f8\fs20 \cell \pard \s39\sb120\sa120\nowidctlpar\intbl \cell \pard \s39\sb120\sa120\nowidctlpar\intbl \cell \pard\plain \widctlpar\intbl \f8\fs20 \row \pard\plain \s39\sb120\sa120\nowidctlpar\intbl \f8\fs20 USES_DCL\cell \pard \s39\sb120\sa120\nowidctlpar\intbl .dcl\cell \pard \s39\sb120\sa120\nowidctlpar\intbl ignored on Unix, renamed to .com on VMS\cell \pard\plain \widctlpar\intbl \f8\fs20 \row \trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 \trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx1948\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx3409\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cellx8748 \pard\plain \s39\sb120\sa120\nowidctlpar\intbl \f8\fs20 USES_TCL_TK\cell \pard \s39\sb120\sa120\nowidctlpar\intbl .tcl\cell \pard \s39\sb120\sa120\nowidctlpar\intbl auto_mkindex run on Unix, left alone on VMS\cell \pard\plain \widctlpar\intbl \f8\fs20 \row \pard\plain \s40\qc\li360\sb120\sa360\nowidctlpar \f8\fs20 Table {\field{\*\fldinst  SEQ Table \\* ARABIC }{\fldrslt 1}}: Supported script types. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The four Unix shells (sh, csh, ksh, bash) are ignored on VMS, i.e. you could have both .sh and .dcl files in the same MODULE_LIST without having to do #ifdef's based on the operating system.\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar Note also that while every file requires an extension, many of them are stripped off on Unix, leaving just the base name. So, xxx.csh becomes just xxx and yyy.perl becomes just yyy. And DCL .COM files are named .dcl instead of .com to help avoid confusion with packed .com files (the build will copy them to a .com extension for runtime use).\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar Below is an example. You would not normally have this many types of things in the same .com file.\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 #define PROCEDURE test\line #define MODULE_LIST u.dcl v.pdf w.csh x.sh y.sh z.pl \\\line Dpos.tcl form1.tcl form12.tcl\line  \line #define R2LIB\line #define USES_DCL\line #define USES_PDF\line #define USES_CSH\line #define USES_SH\line #define USES_PERL\line #define USES_TCL_TK\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b Class of program unit. }If you are working with a type PROGRAM, then define either R1LIB, R2LIB, R3LIB, or HWLIB to indicate the class of the program. If it is a portable SUBROUTINE, then define either P1_SUBLIB, P2_SUBLIB, P3_SUBLIB, or HW_SUBLIB to indicate the class.{\f3 \par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 For VMS-specific subroutines, you can define OLD_SUBLIB or OLD_SUBLIB3. (these are {\i only }to allow vimake to be used with the current system. just because a subroutine has VMS-specific parts does not mean it goes in OLD_SUBLIB, as long as there are UNIX-specific parts that do the same thing). The program class is used to select which library a subroutine goes in, to pick up the proper include directories, and to allow error checking on programs (e. g. a R2LIB program cannot use R3LIB subroutines), although the error checking is not yet implemented. {\f3 \par }\pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 #define R2LIB \line #define P3_SUBLIB\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b Documentation files for the module. }This applies to all types of modules, and is the only real use most PROCEDUREs have for the imakefile. Any documentation that requires building should go in this section.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Currently, the only type implemented is a TAE error message file (.msg), which is built using the {\cs33\f3 msgbld} program in TAE. Error message files are specified using TAE_ERRMSG. Other types of documentation will be implemented in the future. If no supported documentation types are supplied with the module, then do not define the documentation macros.\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 #define TAE_ERRMSG sffac\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b Libraries needed for link. }This mostly applies to PROGRAMs, although SUBROUTINE might need it on occasion. Every library you need to link to should be specified by defining the appropriate LIB macro. This normally includes LIB_RTL and LIB_TAE for most VICAR programs. The C run-time library is always included, you need not add it. The order is arbitrary, since they are only #define's, but you should try to keep them in order of highest-level to lowest-level, for consistency. For a complete list of all LIB macros currently defined, see the next section. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 You may need a library that is not available via vimake. If so, contact the VICAR system programmer, and the library will be added. Although some mechanisms have been included to allow you to set up your own library names for testing, this is {\i highly} discouraged, and is system-dependent. The VICAR system programmer must track libraries are in use, so they are not omitted when VICAR is ported to a new system or delivered to an external site. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar Some libraries have _DEBUG forms, which link the program with the debuggable version of that library. These are used only during testing. When the program is ready for delivery, it must not use any debuggable libraries. \par Some of the LIB macros also set up include directories for the C compiler. In unusual circumstances, you might need to include a LIB macro in a SUBROUTINE in order to pick up an include file.\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 #define LIB_P2SUB \line #define LIB_MATH77 \line #define LIB_RTL \line #define LIB_TAE }\par \pard\plain \li360\sb120\sa120\nowidctlpar \f8\fs20 Following are more examples of VICAR imakefiles. A simple C program, {\cs33\f3 gen}, was given above. Below is a simple FORTRAN program:\par \pard \li360\sb60\sa60\nowidctlpar {\cs33\f3 #define PROGRAM copy \line #define MODULE_LIST copy. f \line #define MAIN_LANG_FORTRAN \line #define USES_FORTRAN \line #define R2LIB \line #define LIB_RTL \line #define LIB_TAE\par }\pard \li360\sb120\sa120\nowidctlpar Following is an example subroutine that uses several different languages and has VMS-specific code. It illustrates how existing VMS macro code can be retained for efficiency while using portable C code for other machines.\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 #define SUBROUTINE amosids \line #if VMS_OS \line #define MODULE_LIST amosids. fcamosids. c amosufo_vms. mar \line #define CLEAN_OTHER_LIST amosufo_unix. c \line #else \line #define MODULE_LIST amosids. f camosids. c amosufo_unix. c \line #define CLEAN_OTHER_LIST amosufo_vms. mar \line #endif \line \line #define P2_SUBLIB \line #define USES_C \line \line #define USES_ FORTRAN \line #if VMS_OS \line #define USES_MACRO \line #endif\par }\pard\plain \li360\sb120\sa120\nowidctlpar \f8\fs20 The last example is a more complex program, that has many modules, mixed languages, and uses several subroutine libraries.\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\*\bkmkstart Heading24}/* C-style comments are okay if you really feel the need */\line \line #define PROGRAM mgncorr\line \line #define MODULE_LIST mgncorr.f mgncorr_fort.f \\\line mgncorr_support.c mgncorr_correl.f mgncorr_interact.c \\\line mgncorr_graphics.c mgncorr_vdt.c mgncorr_logs.c\line \line #define MAIN_LANG_FORTRAN\line #define USES_C\line #define USES_FORTRAN\line \line #define R2LIB\line \line #define LIB_P2SUB\line #define LIB_VRDI\line #define LIB_MATH77\line #define LIB_RTL\line #define LIB_TAE\par {\*\bkmkstart _Toc429910611}{\pntext\pard\plain\b\fs28\cchs0 2.2\tab}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 Valid vimake Commands{\*\bkmkend Heading24}{\*\bkmkend _Toc429910611} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 This Section lists all the valid vimake macros. Although the order doesn't matter to vimake (since they are all preprocessor defines), you should keep entries in the order presented here for consistency. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 There are nine broad classes of macros, which are listed in separate sections below. \par {\*\bkmkstart Heading25}{\*\bkmkstart _Toc429910612}{\pntext\pard\plain\b\fs28\cchs0 2.2.1\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Module Type Macros{\*\bkmkend Heading25}{\*\bkmkend _Toc429910612} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 These macros define the type of the module. One and only one of these macros must appear. Note: Do not use a tab between the macro and the name on any of these; use only spaces. {\cs33\f3 make} can be quite sensitive about tab characters in the module type names. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b PROGRAM} {\i x}- This imakefile produces an executable program. \ldblquote {\i x\rdblquote } specifies the name of the program. By convention, the name of the COM file minus \ldblquote .com\rdblquote .\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b SUBROUTINE} {\i x}- This imakefile produces a subroutine or subroutine package. The value{\i  x} specifies the name of the subroutine, or of the collection of subroutines. By convention, the name of the COM file minus \ldblquote .com\rdblquote .\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b PROCEDURE} {\i x} - Specifies that this imakefile is for a TCL procedure. \ldblquote {\i x\rdblquote } specifies the name of the procedure. By convention, the name of the COM file minus \ldblquote .com\rdblquote .\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Only one of PROGRAM, SUBROUTINE, and PROCEDURE may be defined.\par {\*\bkmkstart Heading26}{\*\bkmkstart _Toc429910613}{\pntext\pard\plain\b\fs28\cchs0 2.2.2\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Name List Macros{\*\bkmkend Heading26}{\*\bkmkend _Toc429910613} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 These macros list the files used in the imakefile. MODULE_LIST must always be given for anything other than PROCEDURE. Others are optional. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b MODULE_LIST }{\i l} - Specifies the list of source code modules. The argument {\i l} is a space-separated list of filenames, including the extensions. The extensions must match the language types in the supplied USES macros. All files must be in the current directory, i.e. no path names. The MODULE_LIST is used to specify the modules to compile, link, put in the library, and clean (delete after the build). \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Although some of those functions can be overridden with other lists, normally only MODULE_LIST will be used. MODULE_LIST must be defined. MODULE_LIST can only handle about 150 to 200 characters (2. 5 lines) worth of filenames. The limit is lower on VMS than on UNIX.\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar If you have more files than MODULE _LIST can handle by itself, use the list extension macros MODULE_LIST2, MODULE_LIST3, and MODULE_LIST4. Define MODULE_LIST in any case; the extensions are also used if present. They should be used in order. Each of the extensions can handle about 200 characters. If you need more than three extensions, contact the VICAR system programmer to add more extensions. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b MODULE_LIST2} {\i l} - The first extension for MODULE_LIST. See MODULE_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b MODULE_LIST3} {\i l} - The second extension for MODULE_LIST if MODULE_LIST2 fills up. See MODULE_LIST.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b MODULE_LIST4} {\i l} - The third extension for MODULE_LIST if MODULE_LIST3 fills up. See MODULE_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b INCLUDE_LIST} {\i l} - The argument {\i l} is a space-separated list of local include files, if any. All includes delivered with the .COM file must be listed here, with the appropriate filename extensions.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 If there are no local includes, then do not define INCLUDE_LIST. System includes, or includes from SUBLIB, should not be in the list. This list is used for the source cleaning operation and makefile dependencies. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b INCLUDE_LIST2} {\i l} - The first extension for INCLUDE_LIST. See INCLUDE_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b INCLUDE_LIST3} {\i l} - The second extension for INCLUDE_LIST if INCLUDE_LIST2 fills up. See INCLUDE_LIST.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b INCLUDE_LIST4} {\i l} - The third extension for INCLUDE_LIST if INCLUDE_LIST3 fills up. See INCLUDE_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b FTNINC_LIST} {\i l} - The argument {\i l} is a space-separated list of FORTRAN system and SUBLIB includes used in the FORTRAN modules, if any. All FORTRAN system and SUBLIB includes must be listed here, {\i without} filename extensions.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 If there are no FORTRAN system or SUBLIB includes, then do not define FTNINC_LIST. This list is used to create logical names or symbolic links to the includes before the compile step. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b CLEAN_LIST} {\i l}  - The argument {\i l}is a space-separated list of object files to delete (clean) after a compile. If not given, this list defaults to the value for MODULE_LIST, so CLEAN_OBJ_LIST should be rarely used.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The names in CLEAN_OBJ_LIST must have {\i source code} filename extensions. vimake will convert them to standard object module names automatically. CLEAN_OBJ_LIST may be extended with CLEAN_OBJ_LIST2, CLEAN_OBJ_LIST3, and CLEAN_OBJ_LIST4 in the same way as MODULE_LIST. See MODULE_LIST for details. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b CLEAN_OBJ_LIST2} {\i l} - The first extension for CLEAN_OBJ_LIST. See CLEAN_OBJ_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b CLEAN_OBJ_LIST3} {\i l} - The second extension for CLEAN_OBJ_LIST if CLEAN_OBJ_-LIST2 fills up. See CLEAN_OBJ_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b CLEAN_OBJ_LIST4} {\i l} - The third extension for CLEAN_OBJ_LIST if CLEAN_OBJ_LIST3 fills up. See CLEAN_OBJ_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b CLEAN_SRC_LIST} {\i l} - The argument {\i l} is a space-separated list of source code to delete during a clean-source operation. This happens during system builds. Since the source code just came from the COM file, it does not need to be kept after the build. If not given, this list defaults to the value for MODULE_LIST, so CLEAN_SRC_LIST should rarely if ever be used. CLEAN_SRC_LIST may be extended with CLEAN_SRC_LIST2, CLEAN_SRC_LIST3, and CLEAN_SRC_LIST4 in the same way as MODULE_LIST. See MODULE_LIST for details. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b CLEAN_SRC_LIST2} {\i l} - The first extension for CLEAN_SRC_LIST if it is too big. See CLEAN_SRC_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b CLEAN_SRC_LIST3} {\i l} - The second extension for CLEAN_SRC_LIST if CLEAN_SRC_LIST2 fills up. See CLEAN_SRC_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b CLEAN_SRC_LIST4} {\i l} - The third extension for CLEAN_SRC_LIST if CLEAN_SRC_LIST3 fills up. See CLEAN_SRC_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b CLEAN_OTHER_LIST} {\i l} - The argument {\i l} is a space-separated list of other files to clean during a clean-source operation. After a clean-source is performed, only the files needed to execute the program (usually the program itself and the PDF) and the original .COM file should still exist in the directory.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 If any files are unpacked or created during the build process that are used only during the build process and that not covered by MODULE_LIST or INCLUDE_LIST (or automatically deleted as the .bld, .make, and .imakefiles are), then they should be listed in CLEAN_OTHER_LIST.\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar These files are typically source code files that are used only on other machines, if MODULE_LIST or INCLUDE_LIST are defined conditionally. If there are no extra files (the usual case), then do not define CLEAN_OTHER_LIST. There are currently no extension macros defined for CLEAN_OTHER_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LINK_LIST} {\i l} - The argument {\i l} is a space-separated list of object code modules to link, in the order they will appear in the link statement. It is only valid for type PROGRAM. The object code modules must have a \rdblquote .o\rdblquote  extension, even for VMS (it is converted to \ldblquote .obj\rdblquote  automatically).\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 If not given, this list defaults to the value for MODULE_LIST (which is automatically converted to object-name format), so LINK_LIST should rarely be used. LINK_LIST may be extended with LINK_LIST2, LINK_LIST3, and LINK_LIST4 in the same way as MODULE_LIST. See MODULE_LIST for details. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LINK_LIST2} {\i l} - The first extension for LINK_LIST. See LINK_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LINK_LIST3} {\i l} - The second extension for LINK_LIST if LINK_LIST2 fills up. See LINK_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LINK_LIST4} {\i l} - The third extension for LINK_LIST if LINK_LIST3 fills up. See LINK_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_LIST} {\i l} - The argument {\i l} is a space-separated list of object code modules to put in the object code library. It is only valid for type SUBROUTINE. The object code modules must have a \ldblquote .o\rdblquote  extension, even for VMS (it is converted to \ldblquote .obj\rdblquote  automatically). If not given, this list defaults to the value for MODULE_LIST (which is automatically converted to object-name format), so LIB_LIST should rarely be used. LIB_LIST may be extended with LIB_LIST2,LIB_LIST3, and LIB_LIST4 in the same way as MODULE_LIST. See MODULE_LIST for details. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_LIST2} {\i l} - The first extension for LIB_LIST. See LIB_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_LIST3} {\i l} - The second extension for LIB_LIST if LIB_LIST2 fills up. See LIB_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_LIST4} {\i l} - The third extension for LIB_LIST if LIB_LIST3 fills up. See LIB_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b SCRIPT_LIST} - List of script files (and extensions). Similar to LINK_LIST, in that it is derived from MODULE_LIST normally and SCRIPT_LIST is an override. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 SCRIPT_LIST is not implemented on VMS though, so it should not be set by the user (i.e. use MODULE_LIST). Scripts are "built" depending on the type of script, often nothing but a chmod +x is done to them, but it depends on the script type. They're all listed in various USES_x below. Scripts should only be defined for type PROCEDURE (as opposed to PROGRAM or SUBROUTINE). Note that if a PROCEDURE has no MODULE_LIST, it automatically gets "PROCEDURE.pdf" where PROCEDURE is the name defined in the PROCEDURE #define. This is for backwards compatibility. So for example, pdf procedure imake's should now #define MODULE_LIST x.pdf and also #define USES_PDF. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b SCRIPT_LIST2} - {\i l} - The first extension for SCRIPT_LIST. See SCRIPT_LIST.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b SCRIPT_LIST3} - {\i l} - The second extension for SCRIPT_LIST if SCRIPT_LIST2 fills up. See SCRIPT_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b SCRIPT_LIST4} - {\i l} - The third extension for SCRIPT_LIST if SCRIPT_LIST3 fills up. See SCRIPT_LIST. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b SYMBOL_LIST} - Optional list of symbols which should be externally visible in the shared library. The SYMBOL_LIST elements should be defined using the SYMBOL and FSYMBOL macros:\par \pard\plain \s92\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 #define SYMBOL_LIST SYMBOL(zvzinit) SYMBOL(zzinit) \\\line \line SYMBOL(zvpinit) SYMBOL(zv_rtl_init) SYMBOL(sc2for) SYMBOL(sc2for_array)\\\line \line SYMBOL(sfor2c) SYMBOL(sfor2c_array) SYMBOL(sfor2len) SYMBOL(sfor2ptr) \\\line \line FSYMBOL(abend) SYMBOL(zabend) FSYMBOL(qprint) SYMBOL(zqprint) \\\line \line FSYMBOL(xladd) SYMBOL(zladd) FSYMBOL(xldel) SYMBOL(zldel) \\\line \line ...\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Where SYMBOL defines a C symbol, and FSYMBOL defines a Fortran-callable symbol (underscores are added where necessary). See for example librtl.com or librtlf.com in rtl, or for a smaller one, script_glue.com in gui/prog.\par {\*\bkmkstart Heading27}{\*\bkmkstart _Toc429910614}{\pntext\pard\plain\b\fs28\cchs0 2.2.3\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Main Language Macros{\*\bkmkend Heading27}{\*\bkmkend _Toc429910614} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 These macros define the language of the main program. One and only one of these must be present for type PROGRAM. They are not needed for any other type. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b MAIN_LANG_C} - If defined, the main program is written in C. Valid only for type PROGRAM. The main program is defined as the {\cs33\f3 main44()} subroutine for most VICAR programs, or {\cs33\f3 main()} if the program doesn't use the standard VICAR startup routines. For programs, one and only one of MAIN_LANG_C, MAIN_LANG_C_PLUS_PLUS and MAIN_LANG_ FORTRAN must be defined. Use MAIN_LANG_C for C++, K&R C and ANSI C. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b MAIN_LANG_C_PLUS_PLUS} - Main language is C++, similar to MAIN_LANG_C.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b  MAIN_ LANG_FORTRAN }- If defined, the main program is written in FORTRAN. The main program is defined as the {\cs33\f3 main44} subroutine for most VICAR programs, or the {\cs33\f3 main} subroutine if the program doesn't use the standard VICAR startup routines. For programs, one and only one of MAIN_LANG_C and MAIN_LANG_ FORTRAN must be defined. \par {\*\bkmkstart Heading28}{\*\bkmkstart _Toc429910615}{\pntext\pard\plain\b\fs28\cchs0 2.2.4\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Languages Used Macros{\*\bkmkend Heading28}{\*\bkmkend _Toc429910615} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 These macros define which languages are used by source files in this imakefile. All the "USES_*" macros indicate that the named language is used in MODULE_LIST; the extension indicates which language it is (e.g. .cc is C++, .c is C, .csh is C-shell, etc.).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b USES_ANSI_C} - If defined, at least one source module is written in ANSI- standard C, as opposed to the older Kernighan and Ritchie (K&R) C. Most VICAR code is currently written in K&R C, although it is recommended that new code be written in ANSI C.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 USES_ANSI_C may or may not accept non-ANSI constructs, depending on the machine implementation, but it should generate warnings if non-ANSI constructs are used. USES_ANSI_C is valid for types PROGRAM and SUBROUTINE. If any C code is to be compiled, either USES_C or USES_ANSI_C must be defined, but not both.\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar Only one version of C may be used at a time, so all of the C modules in the imakefile must be either ANSI or K&R C. All C source modules must have a filename extension of \ldblquote . c\rdblquote . Any number of other USES flags may be defined, if needed. All C modules have the RTL and TAE include files available. Other include directories can included via the LIB macros or the class macros (R2LIB, P2_SUBLIB, etc.). main programs written in ANSI C still use the MAIN_LANG_C macro. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b USES_BASH} - Bourne-again shell scripts. Renames from x.bash to x and chmod +x's. Unix only.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b USES_C} - At least one source module is written in C, using Kernighan and Ritchie (K&R) C, as opposed to ANSI C. Most VICAR code is written using K&R C, so be the flag used most often. USES_C may or may not accept some ANS I code, depending on the machine, but if there is any conflict then the K&R interpretation will be used.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 USES_C is valid for types PROGRAM and SUBROUTINE. If any C code is to be compiled, either USES_C or USES_ANSI_C must be defined, but not both. Only one version of C may be used at a time, so all of the C modules in the imakefile must be either ANSI or K&R C. All C source modules must have a filename extension of \ldblquote .c\rdblquote . Any number of other USES flags may be defined, if needed. All C modules have the RTL and TAE include files available. Other include directories can be included via the LIB macros or the class macros(R2LIB, P2_SUBLIB, etc.). \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b USES_CSH} - C-shell scripts. Renames from x.csh to x and chmod +x's. Unix only.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b USES_C_PLUS_PLUS} - At least one source module is written in C++. All C++ source modules must have a filename extension of \ldblquote .cc\rdblquote .\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b USES_DCL }- Renames the file from x.dcl to x.com on VMS only. Ignored on Unix. Note that DCL scripts must be delivered with ".dcl" extension to distinguish them from vpack's .com files, but the build renames them so they are runnable.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b USES_EXTRACT} - Used in librtlf only. It indicates that MODULE_LIST contains EXTRACT or EXTRACT_TAE macros. These pull individual *.o's out of a library (as opposed to the whole library), and are useful for generating shared libraries, where you want to include a specific *.o but not the whole library. The syntax is EXTRACT(module, libname) where module is the name of the module to extract (with the .o), and libname is the name of the library to extract from (without the "lib" part). For example:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 #define MODULE_LIST EXTRACT(xvzinit.o,rtl) \\ EXTRACT_TAE(xqgenbr.o,tae) EXTRACT_TAE(xqtaskbr.o,tae)\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The only difference between EXTRACT and EXTRACT_TAE is that EXTRACT looks for its library in $V2OLB (v2$olb), while EXTRACT_TAE looks in $TAELIB ($taelib).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b USES_ FORTRAN }- If defined, at least one source module is written in FORTRAN. It is valid for types PROGRAM and SUBROUTINE. If any FORTRAN code is to be compiled, USES_ FORTRAN must be defined. All FORTRAN source modules must have a filename extension of \ldblquote . f\rdblquote . Any number of USES flags may be defined, if needed. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b USES_KSH} - Korn-shell scripts. Renames from x.ksh to x and chmod +x's. Unix only.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b USES_MACRO} - If defined, at least one source module is written in VAX Macro. It is valid for types PROGRAM and SUBROUTINE. If any VAX Macro code is to be assembled, USES_MACRO must be defined.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 VAX Macro code is not portable, so in a portable application a portable version of the same function must be available. Typically, MODULE_LIST will be defined differently for the VMS and UNIX versions (see the examples in the previous Section). All VAX Macro source modules must have a filename extension of \ldblquote .mar\rdblquote . Any number of USES flags may be defined, if needed. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b USES_PDF} - PDF scripts, filename extensin of \ldblquote .pdf\rdblquote . Does nothing with them (at least at the moment, future enhancement might automatically run the pdf->html help converter, or something like that).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b USES_PERL} - Perl scripts. On Unix, renames x.perl or x.pl to x and chmod +x's. Does nothing on VMS, i.e. VMS works with Perl scripts but the build doesn't do anything to them (no renames).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b USES_SH} - Bourne-shell scripts. Renames from x.sh to x and chmod +x's. Unix only.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b USES_TCL_TK} - Tcl/Tk scripts, with extension \ldblquote .tcl\rdblquote . Runs "auto_mkindex" in the directory, which generates the index file that tcl needs to find the scripts. This should work on VMS too, but this compile step is not yet implemented.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b USES_VFC} - If defined, at least one source module is written in the VFC array processor language. It is valid for types PROGRAM and SUBROUTINE. If any VFC code is to be compiled, USES_VFC must be defined.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 At the present time, VFC code is not portable, so in a portable application a portable version of the same function must be available. Typically, MODULE_LIST will be defined differently for the VMS and UNIX versions. All VFC source modules must have a filename extension of \ldblquote .vfc\rdblquote . Any number of USES flags may be defined, if needed. \par {\*\bkmkstart Heading29}{\*\bkmkstart _Toc429910616}{\pntext\pard\plain\b\fs28\cchs0 2.2.5\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Build Flag Macros{\*\bkmkend Heading29}{\*\bkmkend _Toc429910616} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 These macros set up various flags for the compilation or link steps. Define them as needed. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b FTN_STRING} - If defined,  indicates that one or more of the FORTRAN string conversion routines are called by any routine in the program unit. It is valid for types PROGRAM and SUBROUTINE. The FORTRAN string routines are {\b sc2for}, {\b sc2for_array}, {\b sfor2c}, {\b sfor2c_array}, {\b sfor2len}, and {\b sfor2ptr} .\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 They are available only from C. Some operating systems (notably Sun-4) require that modules using these routines be compiled with a lower level of optimization. If none of the string conversion routines are called, then do not define this flag. FTN_STRING must be defined if a C routine merely accepts a FORTRAN string, even if a subroutine ultimately calls the conversion routine. The same routine normally accepts the string and calls the conversion routine. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b C_ OPTIONS} {\i x} -The argument {\i x} defines extra options that are to be given to the C compiler. If no options are needed, do not define C_ OPTIONS. It is valid only in conjunction with the USES_C or USES_ANSI_C flags. The argument {\i x} may be in any format the C compiler allows, and may include spaces. There is no translation performed on the options, so they are machine dependent.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 C_ OPTIONS is intended for program development use only. A program or subroutine should not be delivered with C_ OPTIONS defined. If it is, the C_OPTIONS must be defined in a machine-dependent conditional. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b CCC_TEMPLATES} - Flag indicating that the module uses C++ templates. For VMS only, you need a #pragma in the source file to indicate template instantiation, which must be in one and only one module that uses a particular template instantiation (you should use a symbol such as TEMPLATE_PRAGMA_NEEDED instead of checking for VMS specifically):\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 #pragma define_template SL_List<SptParamBase *>\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The template's .h file should include the .cc file for VMS and AXP_UNIX. Appropriate symbols have not yet been defined system wide; contact the VICAR System Programmer for assistance if you need to use this.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b FORTRAN_OPTIONS} {\i x} - The argument{\i  x} defines extra options that are to be given to the FORTRAN compiler. If no options are needed, do not define FORTRAN_OPTIONS. It is valid only in conjunction with the USES_FORTRAN flag. The argument {\i x} may be in any format the FORTRAN compiler allows, and may include spaces. There is no translation performed on the options, so they are machine dependent.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 FORTRAN_OPTIONS is intended for program development use only. A program or subroutine not be delivered with FORTRAN_OPTIONS defined. If it is, the FORTRAN_OPTIONS must be defined in a machine-dependent conditional. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LINK_OPTIONS} {\i x} - The argument {\i x} defines extra options that are to be given to the linker. If no options are needed, do not define LINK_ OPTIONS. The argument {\i x} maybe in any format the linker allows, and may include spaces. There is no translation performed on the options, so they are machine dependent.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Under VMS, the options are placed after any vimake-generated options; under UNIX the options are placed at the beginning of the command line. LINK_ OPTIONS is intended for program development use only. A program or subroutine should not be delivered with LINK_ OPTIONS defined. If it is, the LINK_ OPTIONS must be defined in a machine-dependent conditional.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b DEBUG} - If defined, causes the makefile to be built for debugging. It is valid for PROGRAMs and SUBROUTINEs only. It is not needed under VMS, or on some versions of UNIX (like the Sun). It is only needed for certain varieties of UNIX (though you can use it on any system) that do not have conditional macros in their versions of {\cs33\f3 make}. For these machines,  set DEBUG in the imakefile, and rerun vimake, to build a program for the debugger.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 For UNIX machines that do have conditional macros, simply use the \ldblquote debug\rdblquote  target in the standard generated makefile; the DEBUG flag is not needed. For VMS, you can use the \ldblquote DEBUG\rdblquote  secondary option in the standard build file, so the DEBUG flag is not needed. A program or subroutine should never be delivered with DEBUG defined. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b PROFILE} - If defined, causes the makefile to be built for profiling. It is valid for PROGRAMs and SUBROUTINEs only. It is not needed under VMS, or on some versions of UNIX (like the Sun). It is only needed for certain varieties of UNIX (though you can use it on any system) that do not have conditional macros in their versions of{\cs33\f3  make}. For these machines,  set PROFILE in the imakefile, and rerun vimake, to build a program for the profiler.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 For UNIX machines that do have conditional macros, you can simply use the \ldblquote profile\rdblquote  target in the standard generated makefile, so the PROFILE flag is not needed. For VMS, you can use the \ldblquote PROFILE\rdblquote  secondary option in the standard build file, so the PROFILE flag is not needed. A program or subroutine should never be delivered with PROFILE defined. \par {\*\bkmkstart Heading30}{\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b SHARED_LIBRARY} - Instructs vimake to build a shared library, instead of a normal program. Should be used with type PROGRAM.\par {\*\bkmkstart _Toc429910617}{\pntext\pard\plain\b\fs28\cchs0 2.2.6\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Program Class Macros{\*\bkmkend Heading30}{\*\bkmkend _Toc429910617} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 These macros define what class the program is in. Valid for type PROGRAM only. They specify how to link the library for PROGRAM. One (and only one) of these must be defined.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b MPFLIB} - Mars Pathfinder application. Like R2LIB for MPF programs.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b R1LIB} - Class 1 VICAR application, makes the class 1 SUBLIB includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b GUILIB} - GUI application.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b R2LIB} - Class 2 VICAR application, makes the class 1 and 2 SUBLIB includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b R3LIB} - Class 3 VICAR application, makes the class 1, 2 and 3 SUBLIB includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b HWLIB} - HW application, specific to the Mars '96 project, makes the HW includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b TEST} - Test application.\par {\*\bkmkstart _Toc429910618}{\pntext\pard\plain\b\fs28\cchs0 2.2.7\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Subroutine Class Macros{\*\bkmkend _Toc429910618}\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 These macros define what class the subroutine is in. Valid for type SUBROUTINE only. They specify how to link the library for SUBROUTINE. One (and only one) of these must be defined.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b MPF_SUBLIB} - Mars Pathfinder application. Like P2_SUBLIB for MPF subroutines.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b P1_SUBLIB} - Class 1 portable VICAR subroutine, makes the class 1 SUBLIB includes available to the compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b P2_SUBLIB} - Class 2 portable VICAR subroutine, makes the class 1 and 2 SUBLIB includes available to the compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b P3_SUBLIB} - Class 3 portable VICAR subroutine, makes the class 1, 2 and 3 SUBLIB includes available to the compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b GUI_SUBLIB} - Like P2_SUBLIB but for gui/gui sub-library. (the GUI has four sub-libraries: gui, base, client, and server).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b HW_SUBLIB} - HW subroutines, specific to the Mars '96 project, make the HW includes available to the compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b OLD_SUBLIB} - Class 2 {\i unportable} VMS-specific VICAR subroutine. The subroutine may not be used with any portable applications.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b OLD_SUBLIB3} - Obsolete. Class 3 {\i unportable} VMS-specific VICAR subroutine. The subroutine may not be used with any portable applications.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b SAGE_BASE_SUBLIB} - Like P2_SUBLIB but for SAGE/SAGE sub-library. (SAGE has three sub-libraries: gui, base, client, and server).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b SAGE_CLIENT_SUBLIB} - Like P2_SUBLIB but for SAGE/SAGE sub-library. (SAGE has three sub-libraries: gui, base, client, and server).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b SAGE_SERVER_SUBLIB} - Like P2_SUBLIB but for SAGE/SAGE sub-library. (SAGE has three sub-libraries: gui, base, client, and server).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b TLM_COMMON_SUBLIB} - Uses the telemetry /sub directory.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b TLM_GLL_SUBLIB} - Uses the telemetry GLL specific  directory.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b TLM_RPC_SUBLIB} - RPC subroutine for the telemetry subsystem. Uses the idl compiler.\par {\*\bkmkstart Heading31}{\*\bkmkstart _Toc429910619}{\pntext\pard\plain\b\fs28\cchs0 2.2.8\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Documentation Macros{\*\bkmkend Heading31}{\*\bkmkend _Toc429910619} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 These macros describe documentation that must be built. Use them if needed. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b TAE_ERRMSG} {\i x} - The value {\i x} is the name of the TAE error message file, if present, without extension. This file provides help on error messages generated by the program, and is called a \ldblquote doc\rdblquote  file by the application packer program.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The file must be named according t o standard TAE conventions: \ldblquote  {\i name} fac.msg\rdblquote , where {\i name} is the facility part of the message key (the part before the \ldblquote -\rdblquote ), usually the name of the program. The value {\i x} must not include the \ldblquote .msg\rdblquote  extension. So, TAE_ERRMSG might be set to \ldblquote sffac\rdblquote  or \ldblquote bidrsfac\rdblquote . The message files are built with the TAE program {\cs33\f3 msgbld}. \par {\*\bkmkstart Heading32}{\*\bkmkstart _Toc429910620}{\pntext\pard\plain\b\fs28\cchs0 2.2.9\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Library Macros{\*\bkmkend Heading32}{\*\bkmkend _Toc429910620} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 These macros define the libraries needed for the compile and link steps. LIB_*'s specify how to link the library for PROGRAM, and where to find include files to both PROGRAM and SUBROUTINE. Almost all PROGRAMs and some SUBROUTINEs will define several. Define as many as are needed. They are not useful for type PROCEDURE. LOCAL_LIBRARY is special so it is listed first; the others are in alphabetical order. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar See {\cf6 http://rushmore.JPL.NASA.GOV/install/externalsoftware_old.html} for a list of external software packages (below) with infomation about each.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LOCAL_INCLUDE} - Allow -I to be manually specified in imake file. Should be used only for testing, NEVER in a delivery. Similar to LOCAL_LIBRARY (below).\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LOCAL_LIBRARY}{\i x} - The argument {\i x} defines the name of the local library to use. It is defined in a system-specific manner, so it will have to be #if'd based on the operating system. The default if LOCAL_LIBRARY is not defined (the normal case) is \ldblquote sublib.olb\rdblquote  for VMS and \ldblquote sublib.a\rdblquote  for UNIX. LOCAL_LIBRARY is used differently for PROGRAMs and SUBROUTINEs.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 For SUBROUTINEs, LOCAL_LIBRARY is the name of the object library that the modules are inserted into during a non-system build (system builds go directly to the appropriate system library). This is typically used during development and debugging.\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar For PROGRAMs, LOCAL_LIBRARY is the name of the object library included in the link statement when the LIB_LOCAL flag is set. It is used only during development and debugging. A program or subroutine is never delivered with LOCAL_LIBRARY defined, since the program or subroutine must build in directories other than yours. LOCAL_LIBRARY is provided merely as a convenience during program development. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LIB_ACE_WRAPPERS} - ACE external library,\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_CANDELA} - Candela external library. Proprietary, for Sun4 only.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_C_NOSHR} - Normally the program is automatically linked to the C run-time library as a shared library or a VMS shareable image, and no flag need be given. The C_NOSHR flag, if defined, links the C run-time library as a standard link library instead.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_C3JPEG} - Obsolete. Library for the C Cubed JPEG decompression board. LIB_C3JPEG also makes the C3JPEG library includes available to the C compiler.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 LIB_C3JPEG is not available on all platforms. Currently, it is available only on Sun-4 platforms, as the library is hardware-dependent. If the library is not available (specified by the C3JPEG_AVAIL_OS flag defined in xvmaininc.h), then the LIB_C3JPEG flag is ignored.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LIB_CPLT} - Obsolete. Common Plotting Package library. The Common Plotting Package is currently available under VMS only.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_CURSES} - CURSES package, a set of subroutines for handling navigation on a terminal screen using the cursor.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_DALI} - GEM external library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_DD_PLUS_PLUS} - DD++ external library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_DTR} - Obsolete. VMS Datatrieve database shareable image. The DTR library is available under VMS only. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_ FORTRAN }- FORTRAN run-time library. This flag should {\i only }be used if MAIN_LANG_C is set; the FORTRAN library is included automatically for MAIN_LANG_ FORTRAN .\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The LIB_ FORTRAN flag is needed when linking a C main program to a subroutine written in FORTRAN that uses I/O statements (such as WRITE to a string). This subroutine may be hidden in a library such as P2SUB, so if you get unexplained link errors, you may need this flag.\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar The FORTRAN library is automatically included under VMS (flag is ignored), so you will not know if you need it unless you link the program on a UNIX system\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LIB_FPS} - Obsolete. FPS routines for the VMS array processor. The FPS library is currently available under VMS only. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_HWSUB} - portable HW (Mars '94/\rquote 96 specific) subroutine library. This flag also makes HW includes available to the C compiler. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_HWSUB_DEBUG} - debuggable version of the portable HW (Mars '94/\rquote 96 specific) subroutine library. A program should not be delivered with HWSUB_DEBUG. For program development and maintenance only.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The HWSUB_DEBUG library has not yet been implemented. This flag also makes the HW includes available to the C compiler.\par {\pntext\pard\plain\b\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LIB_KERBEROS }- Kerberos Version 4 libraries. This flag should be defined for programs that define the LIB_MDMS, and use the MDMS DBMS Query Interface libary (QI).{\b \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}LIB_KERBEROS5} - Kerberos Version 5 libraries. This flag should be defined for programs that use FEI version 3.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_LOCAL} - Local library defined in LOCAL_LIBRARY (or the default local library). It is valid only for type PROGRAM. A program should never be delivered with LIB_LOCAL defined, since the program must link in directories other than yours. LIB_LOCAL is provided merely as a convenience during program development. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_MATH77} - MATH77 mathematics subroutine library. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_MATRACOMP} - Obsolete. Matra compression library. This library is proprietary code supplied by Matra for use with the Mars '96 project.\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 LIB_MATRACOMP is currently available only on Sun-4 platforms. If the library is not available, then the LIB_MATRACOMP flag is ignored. As a temporary measure, the C3JPEG_AVAIL_OS flag defined in xvmaininc.h may be used to determine availability of the Matra software. This will change in the future (when linkgroups for subroutines are implemented), so if you use C3JPEG_AVAIL_OS for the Matra library, put in a comment marking this usage as temporary. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LIB_MDMS} - MDMS (Multimission Data Management Subsystem) client library. This flag also makes the MDMS includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_MDMS_FEI} - MDMS FEI (File Exchange Interface) library. This flag also makes the FEI includes available to the C compiler. LIB_MDMS_FEI may be used from type SUBROUTINE for this purpose. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_MDMS_FEI_3} - File Exchange Interface (FEI) client library. Currently, you must also define LIB_KERBEROS5, and LIB_PTHREAD to use the FEI_3 library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_MOTIFAPP} - The MotifApp library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_MOTIF} - X-windows and Motif libraries, specifically X11, Xt, and Xm. This flag also makes the X and Motif includes available to the C compiler. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_MPFSUB} - Mars Pathfinder library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_MPFSUB_DEBUG} - Mars Pathfinder debug library. Not implemented under UNIX.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_NETWORK} - network support libraries, including RPC's (Remote Procedure Calls) and sockets. This flag also makes the network includes available to the C compiler. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Currently, the Multinet network support libraries for VMS require a different include syntax. For example, instead of \ldblquote rpc/rpc.h\rdblquote  the syntax would simply be \ldblquote rpc.h\rdblquote . A conditional compile should take care of this. It is hoped that this difference will be resolved in the future. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LIB_ NETWORK}_{\b NOSHR} - non-shareable version of the network support libraries. It is otherwise identical to LIB_NETWORK. LIB_NETWORK_NOSHR is needed if the PVM libraries are used. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_NIMSCAL} - NIMS calibration library. The NIMS calibration library is currently available under VMS only. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_PDS} - Current PDS (Planetary Data System) label library, including lablib3 and OAL. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_PDS_LABEL} - Deprecated. Old PDS (Planetary Data System) label library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_PVM} - PVM (Parallel Virtual Machine) library. This flag also makes the PVM includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_P1SUB} - portable class 1 SUBLIB library. This flag also makes the class 1 SUBLIB includes available to the C compiler. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_P1SUB_DEBUG} - debuggable version of the portable class 1 SUBLIB library. A program should never be delivered with P1SUB_DEBUG, as it is intended for program development and maintenance only .\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The P1SUB_DEBUG library has not yet been implemented. This flag also makes the class 1 SUBLIB includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LIB_P2SUB} - portable SUBLIB library. If you link toP2SUB, you may {\i not} link to S2 or S3. This flag also makes the class 2 SUBLIB includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_P2SUB_DEBUG} - debuggable version of the portable SUBLIB library. If you link to P2SUB_DEBUG, you may {\i not} link to S2 or S3. A program should never be delivered with P2SUB_DEBUG, as it is intended for program development and maintenance only .\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The P2SUB_DEBUG library has not yet been implemented. This flag also makes the class 2 SUBLIB includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LIB_P3SUB} - portable class 3 SUBLIB library. If you link to P3SUB, you may {\i not} link to S2 or S3. This flag also makes the class 3SUBLIB includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_P3SUB_DEBUG} - debuggable version of the class 3 portable SUBLIB library. If you link to P3SUB_DEBUG, you may {\i not} link to S2 or S3. A program should never be delivered with P3SUB_DEBUG, as it is intended for program development and maintenance only .\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The P3SUB_DEBUG library has not yet been implemented. This flag also makes the class 3 SUBLIB includes available to the C compiler.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LIB_PTHREAD} - POSIX thread library. This library is available beginning with Solaris 2.5, IRIX 6.2 with a special patch, and HPUX 11.x.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_RDM} - Obsolete. RDM library. RDM is currently available under VMS only, where it links as a shareable image. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_ROGUEWAVE} - Tools.h++ version 6.1 class library from Roguewave Inc. (http://www.roguewave.com/products/tools/tools.html). Contains over 140 classes, including dates, times, strings, sets, bags, B-Trees, sorted collections, linked lists, queues, stacks, collection, internationalization, streaming and an interface to the Standard C++ Library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_RTL} - VICAR Run-Time Library. For both VMS and most Unix platforms. If a  shared library isn't available on a Unix platform, the non-shared version will be used.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_RTL_DEBUG} - debuggable version of the VICAR Run-Time Library. A program should never be delivered with RTL_DEBUG. It is used for program development and maintenance only. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_RTL_NOSHR} - VICAR Run-Time Library as a standard link library, as opposed to a shared library or a VMS shareable image. Statically links (to .a/.olb) rather than dynamically linking to the shared library (.so/.exe). RTL is preferred over RTL_NOSHR. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_SAGE_BASE} - gui/base sub-library\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_SAGE_BASE_DEBUG} - gui/base debug sub-library\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_SAGE_CLIENT} - gui/client sub-library\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_SAGE_CLIENT_DEBUG} - gui/client debug sub-library\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_SAGE_SERVER} - gui/server sub-library\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_SAGE_SERVER_DEBUG} - gui/server debug sub-library\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_SIMBAD - }SIMBAD external library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_SYBASE_NOSHR} - Non-shareable form of SYBASE lib.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_SPICE} - SPICE subroutine library. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_SYBASE} - Sybase database client library. This flag also makes the Sybase includes available to the C compiler. LIB_SYBASE may be used from type SUBROUTINE for this purpose. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_S2} - Obsolete. Old, unportable, VMS-specific SUBLIB library. S2 is available under VMS only. If you link to S2, you may {\i not} link to P2SUB or P3SUB. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_S2_DEBUG} - Obsolete. debuggable version of the old, unportable, VMS-specific SUBLIB library. Valid only for type PROGRAM. S2_DEBUG is available under VMS only. If you link toS2_DEBUG, you may {\i not} link to P2SUB or P3SUB. A program should never be delivered with S2_DEBUG, as it is intended for program development and maintenance only. The S2_DEBUG library has not yet been implemented. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_S3} - Obsolete. Old, unportable, VMS-specific class 3 SUBLIB library. Valid for type PROGRAM. S3 is available under VMS only. If you link to S3, you may {\i not} link toP2SUB or P3SUB. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_S3_DEBUG} - Obsolete. Debuggable version of the old, unportable, VMS-specific class 3 SUBLIB library. S3_DEBUG is available under VMS only. If you link to S3_DEBUG, you may {\i not} link to P2SUB or P3SUB. A program should not be delivered with S3_DEBUG, as it is intended for program development and maintenance only. The S3_DEBUG library has not yet been implemented. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_TAE} - TAE object library. Under VMS it links TAE as a shareable image. Some versions of UNIX support shared libraries, so TAE links to the TAE shared library. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_TAE_NOSHR} - TAE object library as a standard link library, as opposed to a shared library or a VMS shareable image. TAE is preferred over TAE_NOSHR. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_TCL_TK} - Tcl/Tk library. (not to be confused with TAE's TCL!)\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_THREAD} - Solaris thread library. Valid on Solaris 2.x only.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_TIFF} - TIFF external library. Also links to geotiff and zlib.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_TLM_COMMON} - Telemetry  common library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_TLM_GLL} - Telemetry GLL specific library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_TLM_GLL_SUBLIB} - Telemetry GLL specific subroutine library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_TLM_RPC_CLIENT} - Telemetry RPC client library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_TLM_RPC_SERVER} - Telemetry RPC server library.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_VRDI} - Virtual Raster Display Interface (VRDI) library. Under VMS it links the VRDI as a shareable image. Some versions of UNIX support shared libraries, so VRDI will link to the VRDI shared library when it is implemented. This flag also makes the VRDI includes available to the C compiler. LIB_VRDI may be used from type SUBROUTINE for this purpose. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_VRDI_DEBUG} - debuggable version of the VRDI library. A program should never be delivered with VRDI_DEBUG; it is intended for program development and maintenance only. This flag also makes the VRDI includes available to the C compiler. LIB_VRDI_DEBUG may be used from type SUBROUTINE for this purpose. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_VRDI_NOSHR} - VRDI as a standard link library, as opposed to a shared library or a VMS shareable image. VRDI is preferred over VRDI_NOSHR. This flag also makes the VRDI includes available to the C compiler. LIB_VRDI_NOSHR may be used from type SUBROUTINE for this purpose. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LIB_XEXT} - Xext library, part of X-windows ("extensions")\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_XMU} - Xmu library, part of X-windows ("miscellaneous utilities")\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_XPM} - X Pixmap library\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_XRT_3D} - 3D Graph. Proprietary widget set from the KL Group.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_XRT_GRAPH} - XRT graph. Proprietary widget set from the KL Group.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LIB_XRT_TABLE} - Table (spreadsheet-like). Proprietary widget set from the KL Group.\par {\*\bkmkstart _Ref393878982}{\*\bkmkstart _Toc429910621}{\pntext\pard\plain\b\fs28\cchs0 2.3\tab}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 Using the Generated VMS Build File{\*\bkmkend _Ref393878982}{\*\bkmkend _Toc429910621} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 This section describes the options you can use to control the build process using the generated VMS build file\par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar The VMS build files will look different depending on whether you are building a PROGRAM,SUBROUTINE, or PROCEDURE, and what languages you use. All options are described below. Some may not apply, depending on what you are building. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar The VMS build file is executed with the \ldblquote {\cs33\f3 @} \ldblquote  command. The build file can have three arguments. The first is the primary option, the second is the secondary option list, and the third is a module list. All three parameters are optional. In the lists below, the capitalized letters are required (although they may be in lowercase on the command line), and the lower case letters are optional. Most options can be abbreviated. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 The primary options are: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b COMPile}: Compiles some or all source code modules. Valid for PROGRAM and SUBROUTINE only .\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b DOC}: Builds the documentation files for the unit. Currently, the only supported type of documentation file is a TAE error message file, although other types will be added. Valid for PROGRAM,SUBROUTINE, and PROCEDURE. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LINK}: Links the program. Valid for PROGRAM only. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b INST}all: Installs modules in the object library. Valid for SUBROUTINE only. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b STD}: Builds a private version (\ldblquote  standard \rdblquote ) of the unit in the current directory. It is the default if no primary option is given. It is valid for PROGRAM, SUBROUTINE, and PROCEDURE. For PROGRAM, it is equivalent to the COMPile and LINK steps together. For SUBROUTINE, it is equivalent to the COMPile and INSTall-LOCAL steps together. For PROCEDURE, it is a no-op. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b ALL}: Builds a private version of the unit in the current directory, including documentation. It is valid for PROGRAM, SUBROUTINE, and PROCEDURE. For PROGRAM, it is equivalent to the COMPile, DOC, and LINK steps together. For SUBROUTINE, it is equivalent to the COMPile, DOC, and INSTall-LOCAL steps together. For PROCEDURE, it performs the DOC step. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b SYS}tem: Performs a system build of the unit. This option should only be used by Configuration Management to build the VICAR system. It is valid for PROGRAM, SUBROUTINE, and PROCEDURE. For PROGRAM, it is equivalent to COMPile, DOC, LINK, CLEAN-OBJ, and CLEAN-SRC. For SUBROUTINE, it is equivalent to COMPile, DOC, INSTall-SYSTEM, CLEAN-OBJ, and CLEAN-SRC. For PROCEDURE, it is equivalent to DOC and CLEAN-SRC. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b CLEAN}: Deletes and/or purges files that are used during the build but are not needed during program execution. It is valid for PROGRAM,SUBROUTINE, and PROCEDURE. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The default primary option is STD, which may be omitted. If so, then the secondary option list becomes the first argument to the BLD file, and the module list becomes the second argument. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar The secondary option list is a list of options, separated by commas and with no blanks, that modify how the primary options are performed. They are associated with a primary option, so the corresponding primary must be given for the secondary to take effect (unless the primary is the default STD). \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar Some primaries, such as STD, ALL, and SYStem, are combinations of other primaries. The secondary options apply in these cases as well. For example, the secondaries for COMPile and LINK may be given for STD. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar There is one secondary that does not need a primary: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b NORMal}: Used only as a placeholder if no secondary options are needed but the module list is. If you need to use the module list, but have no secondary options,  give the secondary option NORMal. It is rarely used. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 The secondary options for the COMPile primary option are: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b DEBug}: Compiles the source code for use with the debugger. The options \ldblquote {\cs33\f3 /debug/noopt}\rdblquote  are passed to the compiler ( only \ldblquote {\cs33\f3 /debug}\rdblquote  is passed to the VMS MACRO assembler). \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b PROfile}: Compiles the source code for use with PCA, the Performance and Coverage Analyzer. The option \ldblquote  {\cs33\f3 /debug}\rdblquote  is given to the compiler. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LISt}: Generates a list file. The option \ldblquote {\cs33\f3 /list}\rdblquote  is given to the compiler. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LISTALL}: Generates a full list. The option \ldblquote {\cs33\f3 /show=all}\rdblquote  is given to the compiler. LISTALL implies LIST, so you need not give both. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LISTXREF}: Generates a cross reference listing. The option \ldblquote  {\cs33\f3 /cross_ref}\rdblquote  is passed to the compiler. LISTXREF implies LIST, so you need not give both. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b LINT}: Runs the {\cs33\f3 lint} syntax checker for C. This option is not currently implemented. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 The secondary options for the LINK primary option are: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b DEBug}: Links the code for use with the debugger. The option \ldblquote  {\cs33\f3 /debug} \ldblquote  is given to the linker. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b PROfile}: Links the code for use with PCA, the Performance and Coverage Analyzer. The option \ldblquote  {\cs33\f3 /debug=sys$library:pca$obj.obj}\rdblquote  is given to the linker. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b MAP}: Creates a link map file. The option \ldblquote {\cs33\f3 /map}\rdblquote  is passed to the linker. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b MAPALL}: Creates a full link map file. The option \ldblquote {\cs33\f3 /full}\rdblquote  is passed to the linker. MAPALL implies MAP, so you need not give both. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b MAPXREF}: Includes a cross reference listing in the map file. The option \ldblquote {\cs33\f3 /cross_ref}\rdblquote  is given to the linker. MAPXREF implies MAP, so you need not give both. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 The secondary options for the INSTall primary option are: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b LOCAL}: Installs the object code in the local (private) library. This is the default. The name of the library may be specified with the LOCAL_LIBRARY macro in the imakefile. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b SYSTEM}: Installs the object code in the VICAR system library. This option may only be used by Configuration Management. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 The secondary options for the CLEAN primary option are: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b OBJ}: Deletes object and list files. For PROGRAMs, it purges the executable. This is the default. Valid for PROGRAM and SUBROUTINE. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}{\b SRC}: Deletes the source code, imakefile, and BLD files. Be very careful with this option. It is intended mainly for system builds, where the source code can be deleted after the build because it is maintained in the .COM file. If you are modifying code and do not have an up-to-date .COM file, then do {\i not} use the CLEAN-SRC option. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 The secondary options for the DOC primary option are: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b MSG}: Builds the TAE error message file. If no secondary options for DOC are given, then all documentation is built. If a secondary option is present, then only the types given in the secondaries are built. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The last parameter to the BLD file is the module list. It is a list of modules to compile or clean. Normally, the entire application is built at once, so this is not often used. But the capability exists build only some of the code. This is useful if you are modifying one module of a large program. Once everything is compiled, you need only compile the module you are changing. The names given in the module list must match exactly with the names in the MODULE_LIST macro in the imakefile. If you want to give more than one module name, then separate them with spaces and enclose the whole list in double quotes. \par \pard \s39\fi432\li360\sb120\sa120\nowidctlpar Some examples may prove helpful. The first example merely compiles a version of the program into the local directory: \par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 @prog.bld\par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The next example is the same, except the documentation (if present) is built as well: \par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 @prog.bld all\par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 This example shows building the program for use in the debugger. Note how the secondary option is first because STD was defaulted: \par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 @prog.bld debug \par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The next example shows recompiling a single module out of a large application, and then relinking it with the debugger. A link map is created. The other modules must have already been compiled:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 @prog.bld comp deb module. c \line @prog.bld link deb,map \par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The last example shows how to obtain a full compile listing with cross-reference from a pair of modules:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 @prog.bld comp listall,listxref \ldblquote module1.c module2.f\rdblquote .\par {\*\bkmkstart _Ref393879042}{\*\bkmkstart _Toc429910622}{\pntext\pard\plain\b\fs28\cchs0 2.4\tab}}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 Using the Generated UNIX makefile{\*\bkmkend _Ref393879042}{\*\bkmkend _Toc429910622} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Since most VICAR programmers may not be familiar with {\cs33\f3 make}, this Section briefly describes how to use it. For more details on using {\cs33\f3 make}, see the documentation for it.\par A makefile describes the dependencies between parts of an application and how to build those parts to create the output program. Dependencies are simply the files that are needed to build a piece of the program. For example, the executable depends on all the object files and the link libraries it needs. Each object file depends on its corresponding source file, and the include files that it uses. A link library depends on the object files that make it up.\par Source code may depend on a preprocessor, such as {\cs33\f3 lex} or {\cs33\f3 yacc}, or may come from a source code management system. All these dependencies can be tracked by {\cs33\f3 make}. {\cs33\f3 make} is designed to figure out what needs to be built based on what has changed, and to build only changed files. So, if you modify only one source module, {\cs33\f3 make} checks the modification dates, realizes only one module has changed, and recompiles only that module. \par The vimake-generated makefile takes advantage of many of these features. It does not allow specifying which include files are used by which source files, but since VICAR applications are typically small, this should not cause a problem, but just require a few extra compiles. Full automatic dependency checking may be added to the makefile in the future. \par By default, {\cs33\f3 make} looks for several filenames for the makefile, including \ldblquote  makefile\rdblquote  and \ldblquote  makefile\rdblquote . The generated makefile is always named \ldblquote  {\i file}.make\rdblquote  where {\i file} is the name of the application. Pass the \ldblquote  {\cs33\f3 -f}\rdblquote  option to {\cs33\f3 make} to specify the name of the makefile. \par If you are developing a program, you may rename the file \rdblquote makefile\rdblquote  (or create a symbolic link) so {\cs33\f3 make} will find it automatically. This precludes having more than one application in the same directory, so it should not be done all the time.\par To run {\cs33\f3 make}, use the following syntax:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20  {\cs33 make -f file. make targets\par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 where \ldblquote file\rdblquote  is the name of the application and \rdblquote targets\rdblquote  is an optional list of targets to build (described below). \par {\cs33\f3 make} operates through the use of targets. A target is the final result of the {\cs33\f3 make}. A target could be an object file name, in which case that file would be compiled. It could be the executable name, in which case all the compiles and links necessary to create the executable are performed. There are special targets, such as \ldblquote all\rdblquote  or \ldblquote clean.src\rdblquote , that cause other actions to be performed. More than one target may be given on the same command, separated by spaces. \par The targets available depend on whether you are building a PROGRAM, SUBROUTINE, or PROCEDURE, and on how complex the build is. The allowed targets are listed below. Not all targets will be available in all generated makefiles. \par There are fewer options on the UNIX makefile than there are on the VMS BLD file. This is largely due to the fact that {\cs33\f3 make} takes care of a lot of the details for you. You generally don't need to specify compiling a single module, or only doing the link, because {\cs33\f3 make} will determine what needs to be done and do it for you. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b std}: Builds a private version (\ldblquote  standard \rdblquote ) of the unit in the current directory. It is the default target if none is given. It is valid for PROGRAM, SUBROUTINE, and PROCEDURE. For type SUBROUTINE, the modules are installed in the local link library (see library.local). \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b all}: Builds a private version of the unit in the current directory, including the documentation. It is valid for PROGRAM, SUBROUTINE, and PROCEDURE. For type SUBROUTINE, the modules are installed in the local link library (see library.local). \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b debug}: Builds a debuggable version of the unit (\ldblquote {\cs33\f3 -g}\rdblquote  option to the compiler). This target is only available on machines with conditional macros in {\cs33\f3 make}, such as a Sun. On machines without conditional macros, debug is not a valid target. To build the program for debugging on these machines,  set the DEBUG flag in the imakefile, and re-run vimake. When available, the debug target is valid for PROGRAM and SUBROUTINE. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b profile}: Builds a version of the unit for use with the profiler (\ldblquote  {\cs33\f3 -pg}\rdblquote  option to the compiler). This target is only available on machines with conditional macros in {\cs33\f3 make}, such as a Sun. On machines without conditional macros, profile is not a valid target. To build the program for use with the profiler on these machines,  set the PROFILE flag in the imakefile, and re-run vimake. When available, the profile target is valid for PROGRAM and SUBROUTINE. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b system}: Performs a system build of the unit. This target should only be used by Configuration Management to build the VICAR system. It is valid for PROGRAM, SUBROUTIN E, and PROCEDURE. The system target performs a clean.src operation, which will delete the source code (since it just came from the COMfile, it's not needed any more). \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b compile}: Compiles all the source code, but does not link or install the objects in a library. It is valid for PROGRAM and SUBROUTINE. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b Object module name}: The name of an object module (with \ldblquote .o\rdblquote  extension) may be given to compile only one module. This is valid for PROGRAM and SUBROUTINE. Specifying an object module name is not particularly useful, since{\cs33\f3  make} already determines which modules need to be compiled. This option will rarely be used. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b Executable name}: The name of the program itself may be used as a target, for type PROGRAM only. It is equivalent to the target \ldblquote std\rdblquote . \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b library.local}: Installs the object code in the local (private) library. The name of the library may be specified with the LOCAL_LIBRARY macro in the imakefile. The modules are compiled if needed first. This target is valid for SUBROUTINE only. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b library. system}: Installs the object code in the VICAR system library. This option may only be used by Configuration Management. The modules are compiled if needed first. This target is valid for SUBROUTINE only.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b clean.obj}: Deletes all object code for this unit. Valid for PROGRAM and SUBROUTINE. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b clean.src}: Deletes the source code, imakefile, and makefiles. It is intended mainly for system builds, where the source code can be deleted after the build because it is maintained in the COMfile. If you are modifying code and do not have an up-to-date COM file, then do {\i not} use the clean.src target. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b doc}: Builds all the documentation files for the unit. Currently, the only supported type of documentation file is a TAE error messagefile, although other types will be added. Valid for PROGRAM, SUBROUTINE, and PROCEDURE. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b doc.errmsg}: Builds the TAE error message file. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Some examples may prove helpful. The first example compiles a version of the program into the local directory:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20  {\cs33 make -f prog.make \par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The next example is the same, except the documentation (if present) is built as well: \par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 make -f prog.make all }\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 This example shows building the program for use in the debugger, for systems that support the \ldblquote debug\rdblquote  target:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 make -f prog make debug \par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The last example shows how to delete the object modules after a build. This is not recommended during most program development, because it forces all the modules to be recompiled every time:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20  {\cs33 make -f prog.make clean.obj \par {\*\bkmkstart _Toc429910623}{\pntext\pard\plain\b\fs36\cchs0 3.\tab}}\pard\plain \s1\sb240\sa240\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f8\fs36 Application Packer{\*\bkmkend _Toc429910623} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 A typical VICAR application program, procedure, or SUBLIB subroutine is composed of several files. These include source code, include files, PDFs, imakefiles, test files, documentation files, and others. In order to better manage all these files, they are packed into one file so they can be treated as a unit. These files are called COM files due to their \ldblquote .com\rdblquote  extension. COM files are created and used via a pair of programs called vpack and vunpack (the \ldblquote V\rdblquote  is for \ldblquote VICAR\rdblquote ). \par vpack and vunpack are complementary, cross-platform programs which are designed to pack and unpack application COM files. A COM file typically includes source code, an imakefile, and a PDF file. The COM file may also include test files and other, application-specific files. Use vunpack to extract files from the COM file. \par {\*\bkmkstart Heading33}{\*\bkmkstart _Toc429910624}{\pntext\pard\plain\b\fs28\cchs0 3.1\tab}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 vpack{\*\bkmkend Heading33}{\*\bkmkend _Toc429910624} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The vpack program accepts a list of parameters: \par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 vpack <file.com>  [-u]\line                   [-s Source file(s)]\line                   [-i IMAKE template file(s)]\line                   [-b VMS build file(s)]\line                   [-m UNIX make file(s)]\line                   [-p PDF file(s)]\line                   [-t Test file(s)]\line                   [-d Documentation file(s)]\line                   [-o "Other" file(s)]\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The \ldblquote  {\cs33\f3 -b}\rdblquote  (VMS build file) and \ldblquote  {\cs33\f3 -m}\rdblquote  (UNIX makefile) should not be used. The \ldblquote  {\cs33\f3 -i}\rdblquote  (i makefile) option should be used instead. Machine-specific build files are allowed only under rare circumstances.\par The \ldblquote  {\cs33\f3 -u} \ldblquote  option tells vpack that the module is unportable (VMS-specific), so the correct header information can be generated (the default for executing the COM file directly with no arguments is changed from \ldblquote STD\rdblquote  to \ldblquote SYS\rdblquote ). If vpack is used with unportable module s, \ldblquote {\cs33\f3 -u}\rdblquote  must be present; for portable modules, it must not be. \par If you call the vpack program with no parameters, it will report a syntax error and give the proper syntax to use. \par Based on the parameters provided, the vpack program will create the new COM file (named in the first argument), read the lists of files in the order given, and append them to the new COM file. None of the source files are altered or deleted. vpack\rquote s output is the COM (ASCII) file. The vpack program requires that the COM filename be included as a parameter and also requires that at least one list of files be specified. \par As an example, the command necessary to assemble the Magellan program {\cs33\f3 view} into a COM file is: \par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 vpack view.com -s view.h host.c image.c overlap.c view.c\line                -i view.imake\line                -p view.pdf\line                -t tstview.pdf tstview.scr{\cs33 \par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 {\cs33\f3 A}n include file (view.h) is considered a \ldblquote source\rdblquote  file. Multiple file names can be separated by commas or spaces or both. If you arrange the command on several lines, you would need a continuation character appropriate for the operating system you are using. \par The vpack program can be executed in two different ways. The command can be executed directly from the command line as shown above, assuming the command line is long enough to hold the entire command. It can also be executed from a repack file created by the vpack program. For example, the repack file created for the {\cs33\f3 view }program is as follows:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 $ vpack view.com -\line         -s view.h host.c image.c overlap.c view.c -\line         -i view.imake -\line         -p view.pdf -\line         -t tstview.pdf tstview.scr\line {\cs33 $Exit \par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The preferred method for executing the vpack program also uses the repack file, but as a parameter to the program:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 vpack view.repack\par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 There is no command line length limit with this method. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 The vpack program creates a COM file in the following format: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 A standard header which lists all of the available parameters and options for the COM file in the VMS environment as comments. This header also lists the version number of the vpack program which created the file and the name of the file. See below for an example of a header. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}DCL code which parses command-line options in the VMS environment and sets up the necessary conditions to execute the user's instructions. For example, if the user typed \ldblquote {\cs33\f3 @file.com source} \ldblquote , the source files from the COM file would be created. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}A repack file which can be used by the vpack program or can be used stand-alone (under VMS only) to repack the COM file after making changes to the files which comprise it. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}The various sections of files which make up the COM file: source file(s), PDF file(s), etc. Each section consists of a label header (\ldblquote $Source_File:\rdblquote ), followed by the files within the Section .\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 If the COM file includes an imakefile for use with vimake, the COM file header options will include many of the options utilized by the generated build file: COMPILE, ALL, SYSTEM, CLEAN, etc.). The vpack program is designed to adjust the header options based on the type of files included.\par If only source files are assembled into the COM file, then the only options listed in the header will be those which unpack the various files - such options as compiling and linking will not be included. If the COM file does not include a PDF file, then the option to unpack the PDF file is omitted from the COM file, and so on. \par A typical header for the {\cs33\f3 view} program, is shown below. Since the {\cs33\f3 view} program includes source files, a PDF file, test files, and an imakefile, all of these options are listed in the header file. The various options for the COM file are only available under VMS. The options are discussed in greater detail below. For further in formation on the use of vimake and the build options, see {\field{\*\fldinst {\cf6  REF _Ref393876421 \\n }}{\fldrslt {\cf6 2}}} {\field{\*\fldinst  REF _Ref393876421 \\* MERGEFORMAT }{\fldrslt vimake}}{\scaps  (page }{\field{\*\fldinst {\scaps  PAGEREF _Ref393876421 }}{\fldrslt {\scaps 3}}}{\scaps )}. \par \pard\plain \s92\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 $!**********************************************************\line $!\line $! Compile+link proc for MIPL module view\line $! VPACK Version 1.4, Thursday, June 25, 1992, 09:41:13\line $!\line $! Execute by entering:\tab \tab $ @view\line $!\line $! The primary option controls how much is to be built.\line $! It must be in the first parameter. Only the capitalized \line $! letters below are necessary.\line $!\line $! Primary options are:\line $!   COMPile     Compile the program modules\line $!   ALL         Build private, unpack the PDF and DOC files.\line $!   STD         Build a private, and unpack the PDF file(s).\line $!   SYStem      Build the system with the CLEAN option, and\line $!               unpack the PDF and DOC files.\line $!   CLEAN       Clean (delete/purge) code parts, see options\line $!   UNPACK      All files are created.\line $!   REPACK      Only the repack file is created.\line $!   SOURCE      Only the source files are created.\line $!   SORC        Only the source files are created.\line $!               (This parameter in for compatibility).\line $!   PDF         Only the PDF file is created.\line $!   TEST        Only the test files are created. \line $!   IMAKE       Only IMAKE file (w/ VIMAKE program) created.\line $!   DOC         Only the documentation files are created.\line $!\line $!   The default is use the STD parameter if non provided.\line $!\line $!***********************************************************\line $!\line $! The secondary options modify how the primary option is performed.\line $! Note that secondary options apply to particular primary options,\line $! listed below. If more than one secondary is desired, separate by\line $! commas so the entire list is in a single parameter.\line $!\line $! Secondary options are:\line $! COMPile,ALL:\line $!   DEBug      Compile for debug           (/debug/noopt)\line $!   PROfile    Compile for PCA             (/debug)\line $!   LISt       Generate a list file        (/list)\line $!   LISTALL    Generate a full list        (/show=all)   (implies LIST)\line $! CLEAN:\line $!   OBJ        Delete object and list files, purge executable (default)\line $!   SRC        Delete source and make files\line $!\line $!***********************************************************\line $!\line $ write sys$output "*** module view ***"\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20  The following options are only available when the COM file is executed under VMS. To unpack files from the COM file in the UNIX environment, the companion program vunpack must be used.\par Many of these options for build will not typically be used. The recommended way of modifying an application is to unpack it, change it, and repack the results when it's ready for delivery. The same options are available on the vimake-generated BLD file. The COM file may be edited directly without unpacking, in which case these options could be useful. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b COMP}ile: The compile option is only available when the program's files include an imakefile created for use with the vimake utility. This option causes the COM file to create the source file(s) and the imakefile, if necessary. vimake is called to create the appropriate VMS BLD file. The COM file then executes the BLD file to carry out the compile command. This option also has several secondary options: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b DEB}ug: Compile for debug ( {\cs33\f3 /debug/noopt}) \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b PROfile}: Compile for PCA ( {\cs33\f3 /debug}) \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LISt}: Generate a list file ( {\cs33\f3 /list}) \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b LISTALL}: Generate a full list ( {\cs33\f3 /show=all}) (implies LIST) \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 If, for example, you wish to compile the modules for debugging, the appropriate syntax for executing the COM file would be:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 @view comp deb }\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 If you wanted to generate a list file as well:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 @view comp deb,list }\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Secondary options are separated by commas, no spaces. \par The command above would generate debuggable versions of the object file(s) for the program. To create the executable, you would still need to call the BLD file with the \ldblquote LINK DEBUG\rdblquote  parameters. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b ALL}: Builds a private version of the executable in the default directory. By default, no secondary options are used. Since the ALL option carries out the COMPILE command, it accepts the same secondary options described above. The ALL option also unpacks the PDF and documentation files and calls the BLD file to carry out additional processing of the documentation files. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b STD}: Carries out the same actions as the ALL command, with the exception that documentation files are not unpacked and generated. STD is the default option for portable modules (without the \ldblquote  {\cs33\f3 -u}\rdblquote  flag for vpack). \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b SYS}tem: Builds the system version of the executable and executes the CLEAN option as well. None of the secondary options are activated for the COMPILE and LINK commands, while the CLEAN command has both OBJ and SRC secondary options activated. Additionally, the PDF and documentation files are unpacked and any additional processing of the documentation files needed is carried out.\par \pard\plain \li360\sb120\sa120\nowidctlpar \f8\fs20 This command should only be executed by Configuration Management. This option is the default (for compatibility reasons) if the \ldblquote {\cs33\f3 -u}\rdblquote  (unportable) flag is passed to vpack. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b CLEAN}: Deletes and/or purges files from the disk, depending on which secondary options are selected. If the OBJ option is selected, the command deletes any object and list files and purges the executable. This is the default secondary option for the CLEAN command. If the SRC option is selected, the source, imakefile, and build file are deleted. Make sure the COM file is up to date before deleting the files that make it up. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The remaining COM file options select the files unpacked from the COM file. This gives you complete control over which files are removed from the COM file. When the files are unpacked from the COM file, the COM file itself remains unaltered. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b UNPACK}: All files are created. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b REPACK}: Only the repackfile is created. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b SOURCE}: only the source files are created. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b PDF}: Only the PDF file is created. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b TEST}: Only the test files are created. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b DOC}: Only the documentation files are created. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b IMAKE}: Only the imakefile (used with the vimake program) is created. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Since the COM file created by vpack is an ASCII text file, it is editable by the user. We recommend you follow the normal procedure of unpacking the file(s), making and testing the necessary modifications, then using vpack to rebuild the COM file. \par {\*\bkmkstart Heading34}{\*\bkmkstart _Toc429910625}{\pntext\pard\plain\b\fs28\cchs0 3.2\tab}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 vunpack{\*\bkmkend Heading34}{\*\bkmkend _Toc429910625} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The vunpack program unpacks files from a COM file created by vpack. Its primary use is on UNIX systems, where the COM file is not self-extracting, though it may be used in VMS. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 The vunpack program accepts a list of parameters as follows: \par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 vunpack <file.com>  [\{source|pdf|imake|build|make|\line                       test|repack|doc|std|system|unpack|all\}]\par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20  or \par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 vunpack <file.com> -f file.1 file.2 file.3\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 If you call the vunpack program with no parameters, the program will report an error and will tell you the proper syntax to use. \par The first parameter tells vunpack which COM file to extract files from. The remaining (optional) parameters tell the program which file(s) to extract. You may extract more than one type of file, if desired, by putting more than one type on the command line, separated by spaces. If no parameters other than the COM file name are provided, the program unpacks all the files in the COM file. \par The vunpack program will not automatically compile and link the program, but it can extract the imakefile so that you can create the BLD file (VMS) or makefile (UNIX) which can create the executable for you. See {\field{\*\fldinst {\cf6  REF _Ref393878982 \\n }}{\fldrslt {\cf6 2.3}}} {\field{\*\fldinst  REF _Ref393878982 \\* MERGEFORMAT }{\fldrslt Using the Generated VMS Build File}}{\scaps  (page }{\field{\*\fldinst {\scaps  PAGEREF _Ref393878982 }}{\fldrslt {\scaps 24}}}{\scaps )} or {\field{\*\fldinst {\cf6  REF _Ref393879042 \\n }}{\fldrslt {\cf6 2.4}}} {\field{\*\fldinst  REF _Ref393879042 \\* MERGEFORMAT }{\fldrslt Using the Generated UNIX makefile}}{\scaps  (page }{\field{\*\fldinst {\scaps  PAGEREF _Ref393879042 }}{\fldrslt {\scaps 27}}}{\scaps )} for details. \par The {\cs33\f3 vunpack} program also allows you to extract a list of specified files from the COMfile. Instead of unpacking groups of files, by specifying \ldblquote  {\cs33\f3 -f} \ldblquote  and supplying a list of one or more file names, vunpack can unpack only the file(s) you need. \par For example, if only host.c was needed from the view.com file:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 vunpack view.com -f host.c\par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 If you need all of the source files and the imakefile from VIEW.COM:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 {\cs33 vunpack view. com source imake\par }\pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The vunpack program will extract files from the COM file and put them in the current directory, but it will not alter the COM file in any way. \par {\*\bkmkstart Heading35}{\*\bkmkstart _Toc429910626}{\pntext\pard\plain\b\fs28\cchs0 3.3\tab}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 Test Routines{\*\bkmkend Heading35}{\*\bkmkend _Toc429910626} \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Test routines are required for every VICAR class 2 (R2LIB) application and subroutine. Programs and procedures typically have a procedure PDF as the test routine.\par Subroutines must have a test program that calls the subroutine, as well as a procedure PDF that calls the test program. The test program must be portable, and have its own imakefile and its own PDF.\par Subroutines often have four test files :the test program, the imakefile, the test program PDF, and the test PDF that calls it. These files are under the TEST file category in vpack. To run the test, first unpack the TEST files, run vimake on the test imakefile, build the program, and execute the test PDF. The test programs and scripts should test all of the major functions of the program, rather than just testing that the program doesn't crash.\par The log that's generated when the test is run must in most cases be delivered with the program. This ensures that you run the test before delivery, in order to make sure it still works. Run {\cs33\f3 diff} on the new log versus the old log, to make sure nothing changed.\par Checking the logs may be difficult because TAE automatically puts{\cs33\f3  usage }statistics in the log after each program execution. The date, amount of time, page faults, etc. used will vary every time the test is run, and yet make no difference in the results of the regression test. The usage statistics generate lots of meaningless differences, which can hide any real differences. \par For this reason, the TAE global variable $AUTOUSAGE has been added to control the automatic printing of usage statistics. It takes three values: \ldblquote BATCH\rdblquote , \ldblquote ALL\rdblquote , or \rdblquote NONE\rdblquote . Use the TAE command \ldblquote {\cs33\f3 refgbl $AUTOUSAGE}\rdblquote  before the \ldblquote body\rdblquote  statement, then set it with a standard \ldblquote let\rdblquote  command. The values are described below: \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 {\b BATCH}: The default. In this mode, automatic usage statistics are printed after every program execution in batch mode. In interactive mode, usage statistics are not printed unless the {\cs33\f3 usage }command is explicitly given. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b ALL}: Automatic usage statistics are printed after {\i every} program execution, in both batch and interactive modes. \par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}{\b NONE}: Suppresses automatic usage statistics in both batch and interactive modes. With \ldblquote NONE\rdblquote  set, the only way to get the statistics is via the {\cs33\f3 usage} command. \par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 We recommend that $AUTOUSAGE be set to \rdblquote NONE\rdblquote  in every test script, to avoid unneeded usage statistics. \par \pard\plain \li360\sb60\sa60\nowidctlpar \f8\fs20 It is possible that the results of a test involving floating-point calculations may be differ on various machines in the least significant few digits. This is due to differences in numerical representation and precision, as well as possible differences in library routines. The acceptable difference between the results is defined in the {\i MSTP Software Requirements Document}, by Steve Pohorsky, JPL D-10637. {\*\bkmkend Heading52}{\*\bkmkend Heading36}\par {\*\bkmkstart _Ref428698490}{\*\bkmkstart _Ref428698497}{\*\bkmkstart _Ref428698500}{\*\bkmkstart _Toc429910627}{\pntext\pard\plain\b\fs36\cchs0 4.\tab}\pard\plain \s1\sb240\sa240\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f8\fs36 Appendix A: About This Document{\*\bkmkend _Ref428698490}{\*\bkmkend _Ref428698497}{\*\bkmkend _Ref428698500}{\*\bkmkend _Toc429910627}\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 This manual combines material from a previous manual: \ldblquote VICAR Porting Guide\rdblquote  JPL D-9395, 1994,\~{\cf6 http://www\_mipl.jpl.nasa.gov/portguide/portguide.html}, written by Robert G. Deen,\~{\cf6 Robert.G.Deen@jpl.nasa.gov}.\par {\*\bkmkstart _Toc429910628}{\pntext\pard\plain\b\fs28\cchs0 4.1\tab}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 Document Source{\*\bkmkend _Toc429910628}\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 This document was written in the Microsoft Word program. Any changes or additions to it must be made in the original Word document. This is available in two versions: Word native (binary):\~{\cf6 http://www\_mipl.jpl.nasa.gov/buildapps/Build_VICAR_Apps.wrd} and Microsoft RTF (Rich Text Format):\~{\cf6 http://www\_mipl.jpl.nasa.gov//buildapps/Build_VICAR_Apps.rtf}. RTF documents are ASCII text with embedded formatting commands, and can be imported by many word processing programs.\par An Adobe PDF version of this document  at:\~{\cf6 http://www\_mipl.jpl.nasa.gov/buildapps/Build_VICAR_Apps.pdf} is available for easy printing or viewing using the Adobe Acrobat Reader:\~{\cf6 http://www.adobe.com/prodindex/acrobat/readstep.html}.\par {\*\bkmkstart _Toc429910629}{\pntext\pard\plain\b\fs28\cchs0 4.2\tab}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 Generating HTML Version{\*\bkmkend _Toc429910629}\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 The HTML version of this manual is generated automatically from the RTF version by the RTFtoHTML filter program, available from:\~{\cf6 http://www.sunpack.com/RTF/}. You must have a modified version of the html\_trn parameter file:\~{\cf6 http://rushmore.JPL.NASA.GOV/buildapps/html\_trn} in the directory containing the RTFtoHTML program. \par \pard\plain \li360\sb120\sa120\nowidctlpar \f8\fs20 Use this command line to generate the HTML version of the manual:\par \pard\plain \s92\li360\ri880\sb120\sa120\keep\nowidctlpar\tx1320\tx2280\tx3240\tx4200\tx5180\tx6140\tx7100\tx8060\tx9000 \f3\fs20 ./rtftohtml -x -c -h2 -T "Building VICAR Applications" Build_VICAR_Applications.rtf\par {\*\bkmkstart _Toc429910630}{\pntext\pard\plain\b\fs28\cchs0 4.3\tab}\pard\plain \s2\sb120\sa120\keepn\nowidctlpar\brdrb\brdrs\brdrw15 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f8\fs28 Changing or Adding to this Document{\*\bkmkend _Toc429910630}\par \pard\plain \s39\fi432\li360\sb120\sa120\nowidctlpar \f8\fs20 Any editing done in this document may result in page numbers or section numbers changing. These changes are made automatically only if you use cross-references. If you don\rquote t undertand how to use cross-references, please consult the manual or the online help.\par The HTML generation step can only be successful if you use one of a limited number of styles RTFtoHTML understands.The RTFtoHTML manual:\~{\cf6 http://www.sunpack.com/RTF/guide.htm} has complete information. \par Since page number references are not useful in HTML, all references of the form: (PAGE 233) must be formatted with the small caps attribute. The html-trn file is modified so that RTFtoHTML will not translate any text in small caps.\par {\*\bkmkstart _Toc429910631}{\pntext\pard\plain\b\fs28\cchs0 4.3.1\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Styles used in this Document{\*\bkmkend _Toc429910631}\par \pard\plain \li360\sb120\sa120\nowidctlpar \f8\fs20 Below is a list of styles used in this manual. If you use any other styles, please consult the  RTFtoHTML manual:\~{\cf6 http://www.sunpack.com/RTF/guide.htm} and examine the html\_trn parameter file to make sure the additional styles will not break the HTML generation process.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 Heading 1 - top level heading\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}Heading 2 - second level heading\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}Heading 3 - third level heading\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}Normal - text in Times font without first-line indent\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}Normal Indent - text in Times font with first-line indent, no indent in HTML\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}bullet list - first level item list, not numbered\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}bullet list 1 - second level item list, not numbered\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}pre - preformatted text in Courier font, used for code or computer file names\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}glossary - acronym or definition lists\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}Caption - table caption\par {\*\bkmkstart _Toc429910632}{\pntext\pard\plain\b\fs28\cchs0 4.3.2\tab}\pard\plain \s3\sb120\sa120\keepn\nowidctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f8\fs28 Formatting Hints and Kinks{\*\bkmkend _Toc429910632}\par \pard\plain \li360\sb120\sa120\nowidctlpar \f8\fs20 The html-trn is modified for HTML generation to:\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}\pard\plain \s57\fi-187\li547\sb120\sa120\nowidctlpar\tx540{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent180\pnhang{\pntxtb \'b7}}\f8\fs20 Discard any text that is has the text format \ldblquote small caps\rdblquote . This can be found in the Fonts menu item in the Format menu.\par {\pntext\pard\plain\f1\fs20\cchs0 \'b7\tab}Add extra line breaks (<BR>) after paragraphs and list items.\par }